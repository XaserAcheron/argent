// --------------------------------------------------------------------------
//
// ARGENT: Player Definition
//
// --------------------------------------------------------------------------

class ArgPlayer : DoomPlayer
{
	ArgCommon common;
	ArgEquipment activeEquipment; // temp.storage location

	Default
	{
		Player.DisplayName "Doom Marine";
		Player.StartItem "ArgPistol";
		Player.StartItem "ArgFist";
		Player.StartItem "Clip", 50;
		Player.WeaponSlot 1, 'ArgFist', 'ArgChainsaw';
		Player.WeaponSlot 2, 'ArgPistol';
		Player.WeaponSlot 3, 'ArgShotgun', 'ArgSuperShotgun';
		Player.WeaponSlot 4, 'ArgHeavyAR', 'ArgChaingun';
		Player.WeaponSlot 5, 'ArgRocketLauncher';
		Player.WeaponSlot 6, 'ArgPlasmaRifle', 'ArgGaussCannon';
		Player.WeaponSlot 7, 'ArgBFG9000';
	
		DamageFactor "ArgPlayerRocket", 0.5;
		DamageFactor "ArgBFGZapper", 0.0;
	}
	States
	{
	Death:
		"####" "#" 0 A_JumpIf(GetCvar("arg_alwaysgib"), "XDeath");
		Goto Super::Death;
	XDeath:
		PLAY O 3;
		PLAY P 3 { ArgCommon.TossGibs(self, 'ArgGibSmall', 9, ARG_TG_SOUND, 10, 24, 3, 5); A_PlaySound("*xdeath"); }
		PLAY Q 3 { ArgCommon.TossGibs(self, 'ArgGibLarge', 4, ARG_TG_FALL ,  2, 24, 2, 3); }
		PLAY RSTUV 3;
	Death.Massacre:
		PLAY W -1;
		Stop;
	}
	
	/*
	 * Before the player begins to play, we must first BeginPlay. Poetic.
	 */
	override void BeginPlay()
	{
		Super.BeginPlay();
		self.common = ArgCommon.Get();
	}
	
	/*
	 * Tick-Tock Motherfucker!
	 */
	override void Tick()
	{
		Super.Tick();

		// recharge equipment
		ArgEquipment equipment;
		for(int i = 0; i < common.merch.Size(); i++) {
			equipment = ArgEquipment(self.FindInventory(common.merch[i].giveclass));
			if(equipment) {
				equipment.Arg_Recharge();
			}
		}
	}
	
	/*
	 * Grant a piece of merch to the player. This is done here since Weird Things(tm)
	 * were happening when trying to gift an inventory item from another item
	 * (probably some self pointer shenanigans).
	 */
	bool Arg_GrantEquipment(class<Inventory> item, int amount = 1)
	{
		if(item) {
			let equipment = ArgEquipment(self.FindInventory(item));

			// make sure we don't gift over the max amount.
			if(!equipment || equipment.rechargeAmount < equipment.MaxAmount) {
				GiveInventory(item, amount);

				// find the equipment again just in case it was null before,
				// then gift one more unit of recharge (up to MaxAmount).
				equipment = ArgEquipment(self.FindInventory(item));
				if(equipment) {
					equipment.rechargeAmount++;
				}
				return true;
			}
		}
		return false;
	}
}
