// --------------------------------------------------------------------------
//
// ARGENT: Super Shotgun
//
// --------------------------------------------------------------------------

class ArgSuperShotgun : ArgWeapon replaces SuperShotgun
{
	Default
	{
		Weapon.SelectionOrder 1;
		Weapon.AmmoUse 2;
		Weapon.AmmoUse2 2;
		Weapon.AmmoGive 8;
		Weapon.AmmoType "Shell";
		Weapon.AmmoType2 "Shell";
		Inventory.Icon "graphics/hud/weapon-ssg.png";
		Inventory.PickupMessage "$ARG_GOT_SSG";
		Tag "$ARG_TAG_SSG";
		Obituary "$ARG_OB_SSG";
		DamageType "ArgSuperShotgun";
	}
	States
	{
	Spawn:
		SSGP A -1;
		Stop;
	Ready:
		SSGG A 0 Arg_A_JumpSSG('ModernReady', 'ClassicReady');
	Select:
		SSGG A 0 Arg_A_JumpSSG('ModernSelect', 'ClassicSelect');
	Deselect:
		SSGG A 0 Arg_A_JumpSSG('ModernDeselect', 'ClassicDeselect');
	Fire:
		SSGG A 0 Arg_A_JumpSSG('ModernFire', 'ClassicFire');
	Altfire:
		SSGG A 0 Arg_A_JumpSSG('ModernAltfire', 'ClassicAltfire');
	Flash:
		TNT1 A 4 Bright A_Light(2);
		TNT1 A 3 Bright A_Light(1);
		Goto LightDone;

	/*
	 * Modern Sprites
	 */
	ModernReady:
		NSGG A 1 A_WeaponReady();
		Goto Ready;
	ModernSelect:
		NSGG A 0;
		Goto SelectLoop;
	ModernDeselect:
		NSGG A 0 A_ZoomFactor(1.0);
		Goto DeselectLoop;
	ModernFire:
		// [TODO] this
		Goto ClassicFire;
	ModernAltfire:
		// [TODO] this
		Goto ClassicAltfire;

	/*
	 * Classic Sprites (Neccronixis's original; not Doom2's ;)
	 */
	ClassicReady:
		SSGG A 1 A_WeaponReady();
		Goto Ready;
	ClassicSelect:
		SSGG A 0;
		Goto SelectLoop;
	ClassicDeselect:
		SSGG A 0 A_ZoomFactor(1.0);
		Goto DeselectLoop;
	ClassicFire:
		SSGF A 2 Bright Arg_A_FireSSG();
	ClassicFireAnim:
		SSGG B 1 Arg_A_WeaponOffset(  0,   0);
		SSGG B 1 Arg_A_WeaponOffset(  6, - 7);
		SSGG C 1 Arg_A_WeaponOffset(  9, - 9);
		SSGG C 1 Arg_A_WeaponOffset( 14, -13);
		SSGG C 1{Arg_A_WeaponOffset( 15, -13); A_JumpIfNoAmmo("ClassicEmpty"); }
		SSGG C 1 Arg_A_WeaponOffset( 13, -11);
		SSGG C 1 Arg_A_WeaponOffset(  8, - 6);
		SSGG D 1 Arg_A_WeaponOffset(  3,   2);
		SSGG E 1 Arg_A_WeaponOffset(-14,   7);
		SSGG F 1 Arg_A_WeaponOffset(-23,  10);
		SSGG G 1 Arg_A_WeaponOffset(-28,  14);
		SSGG H 1 Arg_A_WeaponOffset(-30,  17);
		SSGG I 1 Arg_A_WeaponOffset(-31,  18);
		SSGG J 1 Arg_A_WeaponOffset(-31,  18);
		SSGG K 1 Arg_A_WeaponOffset(-32,  19);
		SSGG L 1 Arg_A_WeaponOffset(-35,  18);
		SSGG M 1 Arg_A_WeaponOffset(-42,  13);
		SSGG N 1 Arg_A_WeaponOffset(-48,   5);
		SSGG O 1 Arg_A_WeaponOffset(-53, - 3);
		SSGG P 1 Arg_A_WeaponOffset(-55, - 8);
		SSGG P 1 Arg_A_WeaponOffset(-57, -12);
		SSGG P 1 Arg_A_WeaponOffset(-58, -13);
		SSGG Q 1 Arg_A_WeaponOffset(-58, -13);
		SSGG R 1 Arg_A_WeaponOffset(-58, -13);
		SSGG S 1 Arg_A_WeaponOffset(-59, -13);
		SSGG T 1 Arg_A_WeaponOffset(-61, -12);
		SSGG U 1 Arg_A_WeaponOffset(-64, -11);
		SSGG V 1 Arg_A_WeaponOffset(-69, -10);
		SSGG W 1 Arg_A_WeaponOffset(-72, - 6);
		SSGG X 1 Arg_A_WeaponOffset(-73,   0);
		SSGG X 1 Arg_A_WeaponOffset(-73,   4);
		SSGG X 1 Arg_A_WeaponOffset(-73,   5);
		SSGG Y 1 Arg_A_WeaponOffset(-73,   3);
		SSGG Z 1 Arg_A_WeaponOffset(-73,   0);
		SSGH A 1 Arg_A_WeaponOffset(-72, - 2);
		SSGH B 1 Arg_A_WeaponOffset(-70, - 4);
		SSGH C 1 Arg_A_WeaponOffset(-68, - 6);
		SSGH D 1 Arg_A_WeaponOffset(-65, - 9);
		SSGH E 1 Arg_A_WeaponOffset(-58, -11);
		SSGH F 1 Arg_A_WeaponOffset(-46, -12);
		SSGH G 1 Arg_A_WeaponOffset(-39, -13);
		SSGH G 1 Arg_A_WeaponOffset(-39, -13);
		SSGH H 1 Arg_A_WeaponOffset(-33, -11);
		SSGH I 1 Arg_A_WeaponOffset(-28, - 9);
		SSGH J 1 Arg_A_WeaponOffset(-25, - 7);
		SSGH K 1 Arg_A_WeaponOffset(-20, - 4);
		SSGG B 1 Arg_A_WeaponOffset(-12, - 2);
		SSGG B 1 Arg_A_WeaponOffset(- 6,   0);
		SSGG A 0{Arg_A_WeaponOffset(0, 0); A_Refire(); }
		Goto Ready;
	ClassicEmpty:
		SSGG C 1 Arg_A_WeaponOffset( 15,  13);
		SSGG C 1 Arg_A_WeaponOffset( 14,  13);
		SSGG C 1 Arg_A_WeaponOffset(  9,   9);
		SSGG B 1 Arg_A_WeaponOffset(  6,   7);
		SSGG B 1 Arg_A_WeaponOffset(  0,   0);
		SSGG A 1;
		SSGG A 0 A_CheckReload();
		Goto Ready;
	ClassicAltfire:
		SSGA A 1 Arg_A_SSGAltUp();
		SSGA A 1 Arg_A_WeaponOffset(- 5.0, 0);
		SSGA B 1 Arg_A_WeaponOffset(-10.0, 0);
		SSGA B 1 Arg_A_WeaponOffset(-12.0,-1);
		SSGA B 5 Arg_A_WeaponOffset(-13.0,-2);
	ClassicAltHold:
		SSGA B 1 Arg_A_SynthFire("ClassicAltShoot");
		SSGA B 0 A_Refire("ClassicAltHold");
	ClassicAltDown:
		SSGA B 1 Arg_A_SSGAltDown();
		SSGA B 1 Arg_A_WeaponOffset(-10.0, 0);
		SSGA A 1 Arg_A_WeaponOffset(- 5.0, 0);
		SSGA A 1 Arg_A_WeaponOffset(- 2.2, 0);
		Goto Ready;
	ClassicAltShoot:
		SSGB A 2 Bright Arg_A_FireSSG(6.0, 3.0);
		SSGB A 0 Arg_A_WeaponOffset(0, 0);
		Goto ClassicFireAnim;
	}
	
	/*
	 * Conditional state-jump based on modern/classic flags. Fosho.
	 */
	action state Arg_A_JumpSSG(statelabel modern, statelabel classic) {
		if(GetCvar("arg_classicssg") > 0) {
			return ResolveState(classic);
		} else {
			return ResolveState(modern);
		}
	}
	
	/*
	 * ARGENT SSG fire, with easily-tweakable choke. Because ""realism"".
	 */
	action void Arg_A_FireSSG(float spread_horz = 11.2, float spread_vert = 7.1) {
		A_ZoomFactor(1.0);
		A_FireBullets(spread_horz, spread_vert, 20, 5, "ArgBulletPuff");
		Arg_A_GunFlash('Flash', (CountInv(invoker.AmmoType1) > 0) ? "weapons/ssg/fire" : "weapons/ssg/firelast");
	}
	
	/*
	 * ARGENT SSG altfire ups/downs, for code reuse's sake
	 */
	action void Arg_A_SSGAltUp() {
		A_PlaySound("weapons/ssg/aimup", CHAN_AUTO);
		A_ZoomFactor(1.25);
		Arg_A_WeaponOffset(-2.5, 0);
	}
	action void Arg_A_SSGAltDown() {
		A_PlaySound("weapons/ssg/aimdown", CHAN_AUTO);
		A_ZoomFactor(1.0);
		Arg_A_WeaponOffset(-12.0, -1);
	}
}
