// --------------------------------------------------------------------------
//
// ARGENT: Rocket Launcher
//
// --------------------------------------------------------------------------

class ArgRocketLauncher : ArgModWeapon replaces RocketLauncher
{
	const ROCKET_OVERLAY_LAYER = 2;
	const MAX_ROCKETS = 50; // ought to be enough for anybody ;)

	int numRockets; // number of detonate-able rockets in flight
	int highRocketIndex; // highest detonate-able rocket index; this is the above minus decrementing on death.
	Actor[MAX_ROCKETS] rockets; // list of detonate-able rockets in flight
	Actor lockTarget; // current lock-on burst target
	ArgRocketReticle lockReticle; // cool lock-on burst reticle
	
	Default
	{
		Weapon.SelectionOrder 7;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 2;
		Weapon.AmmoType "ArgRocketAmmo";
		Inventory.Icon "graphics/hud/weapon-rocket.png";
		Inventory.PickupMessage "$ARG_GOT_ROCKET";
		Tag "$ARG_TAG_ROCKET";


		ArgModWeapon.Mod1Tag "$ARG_MOD_TAG_ROCKET_1";
		ArgModWeapon.Mod1Description "$ARG_MOD_DESC_ROCKET_1";
		ArgModWeapon.Mod1Icon "$ARG_MOD_ICON_ROCKET_1";
		ArgModWeapon.Mod1Pic "$ARG_MOD_PIC_ROCKET_1";
		ArgModWeapon.Mod1AmmoUse 1;

		ArgModWeapon.Mod2Tag "$ARG_MOD_TAG_ROCKET_2";
		ArgModWeapon.Mod2Description "$ARG_MOD_DESC_ROCKET_2";
		ArgModWeapon.Mod2Icon "$ARG_MOD_ICON_ROCKET_2";
		ArgModWeapon.Mod2Pic "$ARG_MOD_PIC_ROCKET_2";
		ArgModWeapon.Mod2AmmoUse 3;
		ArgModWeapon.Mod2Charge 20, 0;

		+WEAPON.NOAUTOFIRE
	}
	States
	{
	Spawn:
		RKLP A -1;
		Stop;
	Ready:
		RKLG A 0;
		Goto Super::Ready;
	Deselect:
		"####" A 0 {
			A_StopSound(CHAN_5);
			invoker.mod2.charge.toMin();
			Arg_A_RocketLockClear();
			A_ClearOverlays(ROCKET_OVERLAY_LAYER, ROCKET_OVERLAY_LAYER);
		}
		Goto DeselectLoop;

	/* Unmodded + Primary */

	Mod0Select:
		RKLG A 0;
		Goto SelectLoop;
	Mod0Ready:
		RKLG A 0;
		Goto ReadyLoop;
	Mod0Fire:
		"####" B 1 Bright {
			Arg_A_GunFlash('Flash', "weapons/rocket/fire");
			Arg_A_FireRocket(4.0 + frandom(-0.50, 0.50), frandom(-0.50, 0.50));
			Arg_A_WeaponOffset(6.0, 3.0);
		}
		"####" C 1 Arg_A_WeaponOffset(16.0,  8.0);
		"####" D 1 Arg_A_WeaponOffset(20.0, 10.0);
		"####" E 1 Arg_A_WeaponOffset(22.0, 11.0);
		"####" F 1 Arg_A_WeaponOffset(23.0, 11.5);
		"####" G 1;
		"####" A 1;
		"####" A 1 Arg_A_WeaponOffset(22.0, 11.0 );
		"####" A 1 Arg_A_WeaponOffset(20.0, 10.0 );
		"####" H 1 Arg_A_WeaponOffset(17.0,  8.5 );
		"####" H 1 Arg_A_WeaponOffset(13.0,  6.5 );
		"####" I 1 Arg_A_WeaponOffset(10.0,  5.0 );
		"####" J 1 Arg_A_WeaponOffset( 7.0,  3.5 );
		"####" K 1 Arg_A_WeaponOffset( 5.0,  2.5 );
		"####" L 1 Arg_A_WeaponOffset( 3.0,  1.5 );
		"####" M 1 Arg_A_WeaponOffset( 2.0,  1.0 );
		"####" N 1 Arg_A_WeaponOffset( 1.0,  0.5 );
		"####" O 1 Arg_A_WeaponOffset( 0.0,  0.0 );
		"####" P 1;
		"####" Q 5 A_CheckReload;
		"####" Q 1 Arg_A_WeaponOffset(-0.25, 0.25);
		"####" R 1 Arg_A_WeaponOffset(-0.5,  0.5 );
		"####" S 1 Arg_A_WeaponOffset(-1.5,  1.5 );
		"####" T 1 Arg_A_WeaponOffset(-2.5,  2.5 );
		"####" U 1 Arg_A_WeaponOffset(-3.5,  3.5 );
		"####" V 4 Arg_A_WeaponOffset(-4.0,  4.0 );
		"####" W 1 Arg_A_WeaponOffset(-3.5,  3.5 );
		"####" X 1 Arg_A_WeaponOffset(-2.5,  2.5 );
		"####" Y 1 Arg_A_WeaponOffset(-1.5,  1.5 );
		"####" Z 1 Arg_A_WeaponOffset(-0.5,  0.5 );
		"####" [ 1 Arg_A_WeaponOffset( 0.0,  0.0 );
		"####" A 0 A_Refire();
		Goto Ready;
	Flash:
		TNT1 A 1 Bright A_Light(1);
		TNT1 A 2 Bright A_Light(2);
		TNT1 A 1 Bright A_Light(1);
		Goto LightDone;

	/* Mod 1: Remote Detonator */
	
	Mod1Select:
		RK1G A 0;
		Goto SelectLoop;
	Mod1Raise:
		RKLG A 0 {
			A_PlaySound("weapons/rocket/mod1swap", CHAN_AUTO);
			A_WeaponOffset(4.0, 32.0, WOF_KEEPY);
		}
		Goto ModSwapUp;
	Mod1Swap:
		RK1S S 1 Arg_A_WeaponOffset( 5.0, 2.0);
		RK1S R 1 Arg_A_WeaponOffset( 6.0, 5.0);
		RK1S Q 1 Arg_A_WeaponOffset( 8.0, 7.0);
		RK1S P 1 Arg_A_WeaponOffset(11.0, 9.0);
		RK1S P 1 Arg_A_WeaponOffset(13.0, 8.0);
		RK1S P 5 Arg_A_WeaponOffset(14.0, 7.0);
		RK1S O 1 Arg_A_WeaponOffset(13.0, 6.5);
		RK1S N 1 Arg_A_WeaponOffset(11.0, 5.5);
		RK1S M 1 Arg_A_WeaponOffset( 9.0, 4.5);
		RK1S L 1 Arg_A_WeaponOffset( 7.0, 3.5);
		RK1S J 1 Arg_A_WeaponOffset( 5.0, 2.5);
		RK1S H 1 Arg_A_WeaponOffset( 3.0, 1.5);
		RK1S F 1 Arg_A_WeaponOffset( 1.0, 0.5);
		RK1S E 4 Arg_A_WeaponOffset( 0.0, 0.0);
		RK1S D 1;
		RK1S C 1;
		RK1S B 1;
		RK1S A 1;
	Mod1Ready:
		RK1G A 0 A_Overlay(ROCKET_OVERLAY_LAYER, "Mod1Overlay");
		Goto ReadyLoop;
	Mod1Overlay:
		RK1X A 0 Bright Arg_A_SynthAltFire("Mod1Detonate");
		RK1X A 1 Bright Arg_A_RocketOverlay();
		Loop;
	Mod1OverlayActive:
		RK1X C 1 Bright;
		Goto Mod1Overlay;
	Mod1Detonate:
		RK1X A 0 Bright Arg_A_DetonateRockets();
		RK1X B 3 Bright;
	Mod1DetonateHold:
		RK1X A 2 Bright;
		RK1X A 0 Bright Arg_A_SynthAltFire("Mod1DetonateHold");
		Goto Mod1Overlay;
	Mod1DetonateSuccess:
		RK1X BCBC 2 Bright;
		Goto Mod1DetonateHold;

	/* Mod 2: Lock-on Burst */
	
	Mod2Select:
		RK2G A 0;
		Goto SelectLoop;
	Mod2Raise:
		RKLG A 0 {
			A_Overlay(ROCKET_OVERLAY_LAYER);
			A_PlaySound("weapons/rocket/mod2swap", CHAN_AUTO);
			A_WeaponOffset(4.0, 32.0, WOF_KEEPY);
		}
		Goto ModSwapUp;
	Mod2Swap:
		RK2S N 1 Arg_A_WeaponOffset( 5.0, 2.0);
		RK2S M 1 Arg_A_WeaponOffset( 6.0, 5.0);
		RK2S L 1 Arg_A_WeaponOffset( 8.0, 7.0);
		RK2S K 1 Arg_A_WeaponOffset(11.0, 9.0);
		RK2S K 1 Arg_A_WeaponOffset(13.0, 8.0);
		RK2S K 5 Arg_A_WeaponOffset(14.0, 7.0);
		RK2S J 1 Arg_A_WeaponOffset(13.0, 6.5);
		RK2S I 1 Arg_A_WeaponOffset(11.0, 5.5);
		RK2S H 1 Arg_A_WeaponOffset( 9.0, 4.5);
		RK2S G 1 Arg_A_WeaponOffset( 7.0, 3.5);
		RK2S F 1 Arg_A_WeaponOffset( 5.0, 2.5);
		RK2S E 1 Arg_A_WeaponOffset( 3.0, 1.5);
		RK2S D 1 Arg_A_WeaponOffset( 1.0, 0.5);
		RK2S C 1 Arg_A_WeaponOffset( 0.0, 0.0);
		RK2S B 4 Arg_A_WeaponOffset( 0.0, 0.0);
		RK2S A 2;
	Mod2Ready:
		RK2G A 0;
		Goto ReadyLoop;
	Mod2Up:
		RK2G A 1 A_JumpIfTargetInLOS("Mod2LockStart", 0, JLOSF_COMBATANTONLY);
		RK2G A 0 A_Refire();
		Goto ReadyLoop;
	Mod2LockStart:
		RK2G A 0 {
			Arg_A_RocketLockOn();
			A_PlaySound("weapons/rocket/mod2up", CHAN_6);
			invoker.mod2.charge.inc();
		}
	Mod2Hold:
		RK2G A 1 {
			// check to see if the player has any charge. If none, leap back
			// to Mod2Up as we haven't acquired a valid target yet.
			if(invoker.mod2.charge.isMin()) {
				return ResolveState("Mod2Up");

			// got enough charge and the button's down? fire away!
			} else if (invoker.mod2.charge.isMax() && Arg_SynthFire()) {
				return ResolveState("Mod2Fire");
			}
			invoker.mod2.charge.inc();
			return ResolveState(null);
		}
		RK2G A 0 A_Refire();
	Mod2Down:
		RK2G A 0 {
			invoker.mod2.charge.toMin();
			Arg_A_RocketLockClear();
			A_StopSound(CHAN_6);
		}
		Goto Ready;
	Mod2Fire:
		RK2G C 1 Bright {
			invoker.mod2.charge.toMin();
			A_GunFlash();
			Arg_A_FireRocket(4.0 + frandom(-2.50, 0.50), frandom(-2.50, 0.50), true);
			A_PlaySound("weapons/rocket/fire", CHAN_5);
			A_AlertMonsters();
			Arg_A_WeaponOffset(6.0, 3.0);
			return ResolveState(null);
		}
		RK2G D 1 Arg_A_WeaponOffset(16.0,  8.0);
		RK2G E 1 Arg_A_WeaponOffset(22.0, 11.0);
		RK2G F 1 Arg_A_WeaponOffset(20.0, 10.0);
		RK2G D 1 Bright {
			A_GunFlash();
			Arg_A_FireRocket(4.0 + frandom(-2.50, 0.50), frandom(-2.50, 0.50), true);
			A_PlaySound("weapons/rocket/altfire", CHAN_6);
			A_AlertMonsters();
			Arg_A_WeaponOffset(12.0, 6.0);
		}
		RK2G E 1 Arg_A_WeaponOffset(20.0, 10.0);
		RK2G F 1 Arg_A_WeaponOffset(23.0, 11.5);
		RK2G G 1 Arg_A_WeaponOffset(22.0, 11.0);
		RK2G B 1 Bright {
			A_GunFlash();
			Arg_A_FireRocket(4.0 + frandom(-2.50, 0.50), frandom(-2.50, 0.50), true);
			A_PlaySound("weapons/rocket/fire", CHAN_5);
			A_AlertMonsters();
			Arg_A_WeaponOffset(14.0, 7.0);
		}
		RK2G C 1 Arg_A_WeaponOffset(16.0,  8.0);
		RK2G D 1 Arg_A_WeaponOffset(20.0, 10.0);
		RK2G E 1 Arg_A_WeaponOffset(22.0, 11.0);
		RK2G F 1 Arg_A_WeaponOffset(23.0, 11.5);
		RK2G G 1;
		RK2G A 1;
		RK2G A 1 Arg_A_WeaponOffset(22.0, 11.0 );
		RK2G A 1 Arg_A_WeaponOffset(20.0, 10.0 );
		RK2G A 1 Arg_A_WeaponOffset(17.0,  8.5 );
		RK2G A 1 Arg_A_WeaponOffset(13.0,  6.5 );
		RK2G A 1 Arg_A_WeaponOffset(10.0,  5.0 );
		RK2G H 1 Arg_A_WeaponOffset( 7.0,  3.5 );
		RK2G H 1 Arg_A_WeaponOffset( 5.0,  2.5 );
		RK2G I 1 Arg_A_WeaponOffset( 3.0,  1.5 );
		RK2G I 1 Arg_A_WeaponOffset( 2.0,  1.0 );
		RK2G J 1{Arg_A_WeaponOffset( 1.0,  0.5 ); A_PlaySound("weapons/rocket/mod2load", CHAN_5); }
		RK2G J 1 Arg_A_WeaponOffset( 0.0,  0.0 );
		RK2G K 1{Arg_A_RocketLockClear(); A_CheckReload(); }
		RK2G LMNOP 1;
		RK2G Q 1 Arg_A_WeaponOffset(-0.25, 0.25);
		RK2G R 1 Arg_A_WeaponOffset(-0.5,  0.5 );
		RK2G S 1 Arg_A_WeaponOffset(-1.5,  1.5 );
		RK2G T 1 Arg_A_WeaponOffset(-2.5,  2.5 );
		RK2G U 1 Arg_A_WeaponOffset(-3.5,  3.5 );
		RK2G V 1 Arg_A_WeaponOffset(-4.0,  4.0 );
		RK2G W 1 Arg_A_WeaponOffset(-3.5,  3.5 );
		RK2G X 1 Arg_A_WeaponOffset(-2.5,  2.5 );
		RK2G Y 1 Arg_A_WeaponOffset(-1.5,  1.5 );
		RK2G Z 1 Arg_A_WeaponOffset(-0.5,  0.5 );
		RK2G [ 1 Arg_A_WeaponOffset( 0.0,  0.0 );
		RK2G A 0 A_Refire();
		Goto Ready;
	}
	
	/*
	 * Fires a rocket. Temporarily calls SpawnPlayerMissile directly instead of
	 * A_FireProjectile, as we need a pointer to the spawned missile and
	 * the action functions only return a pointer in the GZD devbuilds.
	 */
	action void Arg_A_FireRocket(float spawnofs_xy = 0, float spawnheight = 0, bool noautoaim = false) {
		
		Arg_A_TakeAmmo();
		Vector2 spawnOffset = AngleToVector(self.angle, spawnofs_xy);
		let rocket = ArgRocket(SpawnPlayerMissile('ArgRocket', self.angle, spawnOffset.x, spawnOffset.y, spawnheight, noautoaim:noautoaim));
		if (rocket)
		{
			// do some additional handling on the rocket based on the selected mod.
			if(invoker.modSelected == invoker.mod1 && invoker.highRocketIndex < invoker.MAX_ROCKETS) {
				// Remote Detonate: register the missile for future detonation.
				rocket.theThingThatLaunchedMe = invoker;
				invoker.rockets[invoker.highRocketIndex] = rocket;
				invoker.highRocketIndex++;
				invoker.numRockets++;
			}
			if(invoker.modSelected == invoker.mod2 && invoker && invoker.lockTarget) {
				// Lock-On Burst: set the lock target if we've got one.
				rocket.bSeekerMissile = true;
				rocket.tracer = invoker.lockTarget;
			}
		}
	}
	
	/*
	 * Super-Special Overlay Control. Of specialness.
	 */
	action state Arg_A_RocketOverlay() {
		if(invoker.numRockets > 0) {
			return ResolveState('Mod1OverlayActive');
		} else {
			return ResolveState(null);
		}
	}
	
	/*
	 * Remote-detonates all rockets. Aww yeah!
	 */
	action state Arg_A_DetonateRockets() {
		bool didDetonate = false;

		// pretty simple stuff. just loop through the rocket array
		// and detonate anything we see.
		for(int i = 0; i < invoker.highRocketIndex; i++) {
			let rocket = ArgRocket(invoker.rockets[i]);
			if(rocket && !rocket.detonated) {
				didDetonate = true;
				rocket.SetStateLabel('Detonate');
			}
			invoker.rockets[i] = null;
		}
		invoker.highRocketIndex = 0;
		invoker.numRockets = 0;

		if(didDetonate) {
			A_PlaySound("weapons/rocket/mod1yep", CHAN_7);
			return ResolveState('Mod1DetonateSuccess');
		} else {
			A_PlaySound("weapons/rocket/mod1nope", CHAN_7);
			return ResolveState(null);
		}
	}
	
	/*
	 * Set target lock.
	 */
	action void Arg_A_RocketLockOn() {
		// get the target currently under the player's crosshair (if any)
		// and store it in the player var so we can use it later.
		FTranslatedLineTarget t;
		AimLineAttack(self.angle, MISSILERANGE, t, 0.0, ALF_PORTALRESTRICT);
		if(t.linetarget) {
			invoker.lockTarget = t.linetarget;
			invoker.lockReticle = ArgRocketReticle.X_Create(self, t.linetarget, invoker.mod2.charge.max);
		}
	}

	/*
	 * Clear target lock.
	 */
	action void Arg_A_RocketLockClear() {
		invoker.lockTarget = null;
		if(invoker.lockReticle) {
			invoker.lockReticle.X_Destroy(); //Die(null, null);
			invoker.lockReticle = null;
		}
	}
}

class ArgRocket : ArgRocketBase
{
	bool detonated;
	ArgRocketLauncher theThingThatLaunchedMe;

	Default
	{
		Radius 9;
		Damage 30;
		Speed 30;
		DamageType "ArgPlayerRocket";
		Obituary "$ARG_OB_ROCKET";
	
		+EXTREMEDEATH
	}

	States
	{
	Spawn:
		MISL A 1 Bright A_JumpIfTargetInLOS("Seek", 0, JLOSF_PROJECTILE);
		Loop;
	Seek: 
		MISL A 1 Bright A_SeekerMissile(5, 10);
		Goto Spawn;
	Detonate:
		REXP A 2 Bright {
			detonated = true;
			A_Stop();
			A_SetScale(1.0);
			A_PlaySound("weapons/rocket/explode", CHAN_VOICE);
		}
		REXP B 2 Bright {
			A_SetScale(1.1, 1.0);
			A_Explode(120, 224, 0, 0, 96);
			A_Explode(120, 224, 1, 0, 96);
		}
		REXP C 3 Bright { A_SetScale(1.2, 1.0); A_SetTranslucent(0.7); }
		REXP D 2 Bright { A_SetScale(1.4, 1.0); A_SetTranslucent(0.6); }
		REXP E 2 Bright { A_SetScale(1.5, 1.0); A_SetTranslucent(0.5); }
		REXP F 2 Bright { A_SetScale(1.6, 1.0); A_SetTranslucent(0.4); }
		Stop;
	Death:
		REXP A 4 Bright {
			detonated = true;
			A_SetScale(1.0);
			A_Explode(200, 128, 1);
			
			let this = ArgRocket(self);
			if(this && this.theThingThatLaunchedMe) {
				this.theThingThatLaunchedMe.numRockets--;
			}
		}
		Goto Super::Boom;
	}

	/*
	 * FastProjectile trail effect override: don't spawn a trail if we've gone boom.
	 */
	override void Effect()
	{
		if(!detonated) {
			super.Effect();
		}
	}
}

class ArgRocketReticle : ArgTrailNoPhysics
{
	Vector2 offset;
	Vector2 movedir;
	int moveuntil;
	Array<ArgRocketReticle> minions;

	Default
	{
		RenderStyle 'Add';
		Alpha 0.1;
		Scale 0.5;
	}

	States
	{
	Spawn:
		RLOK A 0 Bright; // primer state. The frame gets changed on spawn.
		RLOK "#" 1 Bright X_RocketReticleWarp();
		Wait;
	Death:
		RLOK "#" 1 X_RocketReticleFade();
		Loop;
	}

	static ArgRocketReticle X_Create(Actor shooter, Actor victim, int fadetics)
	{
		// for fancy effect's sake, we actually want to spawn 4 actors at offsets
		// that fade in towards the middle. We'll mark 3 out of the 4 as "minions"
		// and have the 4th be the main one that controls stuff.
		if(shooter && victim) {
			let masterReticle        = ArgRocketReticle.X_Spawn(shooter, victim, fadetics, (0,  fadetics), 1);
			masterReticle.minions.Push(ArgRocketReticle.X_Spawn(shooter, victim, fadetics, (0, -fadetics), 3));
			masterReticle.minions.Push(ArgRocketReticle.X_Spawn(shooter, victim, fadetics, ( fadetics, 0), 4));
			masterReticle.minions.Push(ArgRocketReticle.X_Spawn(shooter, victim, fadetics, (-fadetics, 0), 2));
			return masterReticle;
		}
		return null;
	}

	static ArgRocketReticle X_Spawn(Actor shooter, Actor victim, int fadetics, Vector2 offset, int frame)
	{
		// actually spawn the reticle and set properties. We're doing this
		// in a separate function since we've got to do this 4 times for all of the
		// little visual components. The things I do for effect's sake... D:
		if(shooter && victim) {
			Vector2 rotpos = RotateVector((0, offset.x), shooter.AngleTo(victim));
			let newReticle = ArgRocketReticle(Spawn('ArgRocketReticle', victim.pos + (rotpos.x, rotpos.y, offset.y + victim.height/2)));
			if(newReticle) {
				newReticle.master = shooter;
				newReticle.tracer = victim;
				newReticle.offset = offset;
				newReticle.frame  = frame;
				newReticle.movedir = (clamp(-1, -offset.x, 1), clamp(-1, -offset.y, 1));
				newReticle.moveuntil = level.totaltime + fadetics; // [XA] :|
			}
			return newReticle;
		}
		return null;
	}

	void X_Destroy(bool alsoDie = true)
	{
		// Remove thyself and minions.
		for(int i = 0; i < minions.Size(); i++) {
			if(minions[i]) {
				minions[i].X_Destroy(alsoDie);
			}
		}
		if(alsoDie) {
			SetStateLabel('Death');
		}
	}

	state X_RocketReticleWarp()
	{
		// Move the reticle a bit if we're in move-mode. We're doing this outside
		// of Tick() since we don't want to do this while fading either.
		if(level.totaltime < moveuntil) {
			self.offset += self.movedir;
			self.alpha = min(self.alpha += 0.05, 0.75);
		} else if (level.totaltime == moveuntil && minions.Size() > 0) {
			self.alpha = 1.0;
			ArgRocketReticleFlash.X_Spawn(self.master, self.tracer, self.pos);
		}

		// Keep the reticle indicator on target. Also check if the target still
		// exists; if they prematurely die or are removed, trigger fade-out.
		if(tracer && tracer.health > 0) {
			A_Warp(AAPTR_TRACER, 2, offset.x, offset.y + tracer.height/2, tracer.AngleTo(master), WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_ABSOLUTEANGLE);
			return null;
		} else {
			X_Destroy(false);
			return ResolveState('Death');
		}
	}

	void X_RocketReticleFade()
	{
		// fade on out, son.
		A_FadeOut(0.075);
	}
}

class ArgRocketReticleFlash : ArgTrailNoPhysics
{
	Default
	{
		RenderStyle 'Add';
		Alpha 0.55;
		Scale 0.45;
	}

	States
	{
	Spawn:
		RLOK A 1 Bright NoDelay X_RocketReticleFlashFade();
		Wait;
	}

	static ArgRocketReticleFlash X_Spawn(Actor shooter, Actor victim, Vector3 pos)
	{
		if(shooter && victim) {
			let newFlash = ArgRocketReticleFlash(Spawn('ArgRocketReticleFlash', pos));
			if(newFlash) {
				newFlash.master = shooter;
				newFlash.tracer = victim;
			}
			return newFlash;
		}
		return null;
	}

	void X_RocketReticleFlashFade()
	{
		if(tracer && tracer.health > 0) {
			A_Warp(AAPTR_TRACER, 2, 0, tracer.height/2, tracer.AngleTo(master), WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_ABSOLUTEANGLE);
		}
		A_SetScale(scale.x + 0.05, scale.y + 0.05);
		A_FadeOut(0.05);
	}
}
