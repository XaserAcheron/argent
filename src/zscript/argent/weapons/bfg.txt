// --------------------------------------------------------------------------
//
// ARGENT: BFG9000
//
// --------------------------------------------------------------------------

class ArgBFG9000 : ArgWeapon replaces BFG9000
{
	int ammouse_classic;
	int ammouse_modern ;
		
	Default
	{
		Weapon.UpSound "weapons/bfg/equip";
		Weapon.SelectionOrder 11;
		Inventory.Icon "graphics/hud/weapon-bfg.png";
		Inventory.PickupMessage "$ARG_GOT_BFG";
		Tag "$ARG_TAG_BFG";
	}

	States
	{
	Spawn:
		BFGP A -1;
		Stop;
	Ready:
		BFGG A 1 Bright A_WeaponReady(WRF_ALLOWRELOAD);
		Loop;
	Select:
		BFGG A 0 Bright;
		Goto SelectLoop;
	Deselect:
		BFGG A 0 Bright;
		Goto DeselectLoop;
	Fire:
		BFGG A 1 Bright X_ChargeBFG();
		BFGG B 1 Bright { Arg_A_WeaponOffset(0, 0, 0.1); A_Quake(1, 8, 0, 8, ""); }
		BFGG C 1 Bright   Arg_A_WeaponOffset(0, 0, 0.1);
		BFGG D 1 Bright   Arg_A_WeaponOffset(0, 0, 0.2);
		BFGG C 1 Bright   Arg_A_WeaponOffset(0, 0, 0.2);
		BFGG D 1 Bright   Arg_A_WeaponOffset(0, 0, 0.3);
		BFGG E 1 Bright   Arg_A_WeaponOffset(0, 0, 0.3);
		BFGG F 1 Bright   Arg_A_WeaponOffset(0, 0, 0.4);
		BFGG G 1 Bright { Arg_A_WeaponOffset(0, 0, 0.4); A_Quake(2, 8, 0, 8, ""); A_GunFlash(); A_AlertMonsters(); }
		BFGG H 1 Bright   Arg_A_WeaponOffset(0, 0, 0.5);
		BFGG I 1 Bright   Arg_A_WeaponOffset(0, 0, 0.5);
		BFGG J 1 Bright   Arg_A_WeaponOffset(0, 0, 0.6);
		BFGG I 1 Bright   Arg_A_WeaponOffset(0, 0, 0.6);
		BFGG J 1 Bright   Arg_A_WeaponOffset(0, 0, 0.7);
		BFGG K 1 Bright   Arg_A_WeaponOffset(0, 0, 0.8);
		BFGG L 1 Bright   Arg_A_WeaponOffset(0, 0, 0.9);
		BFGF A 1 Bright { Arg_A_WeaponOffset(0, 0, 1.0); A_Quake(3, 3, 0, 8, ""); }
		BFGF B 1 Bright   Arg_A_WeaponOffset(0, 0, 0.0);
		BFGF C 0 Bright X_FireBFG();
		BFGF C 1 Bright A_ZoomFactor(0.91, ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		BFGF D 1 Bright A_ZoomFactor(0.92, ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		Goto FireEnd;
	FireAlt: 
		BFGA A 1 Bright A_ZoomFactor(0.91, ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		BFGA B 1 Bright A_ZoomFactor(0.92, ZOOM_INSTANT|ZOOM_NOSCALETURNING);
	FireEnd: 
		BFGF E 1 Bright A_ZoomFactor(0.93, ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		BFGF F 1 Bright A_ZoomFactor(0.94, ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		BFGF G 1 Bright A_ZoomFactor(0.95, ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		BFGF H 1 Bright A_ZoomFactor(0.96, ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		BFGF I 1 Bright A_ZoomFactor(0.97, ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		BFGF J 1 Bright A_ZoomFactor(0.98, ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		BFGF K 1 Bright A_ZoomFactor(0.99, ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		BFGF L 1 Bright A_ZoomFactor(1.00, ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		BFGF MN 1 Bright;
		BFGG A 8 Bright;
		Goto Ready;
	Flash:
		TNT1 A 4 Bright A_Light( 1);
		TNT1 A 2 Bright A_Light( 2);
		TNT1 A 1 Bright A_Light(-2);
		TNT1 A 1 Bright A_Light( 2);
		TNT1 A 1 Bright A_Light( 3);
		TNT1 A 1 Bright A_Light(-1);
		TNT1 A 2 Bright A_Light( 4);
		TNT1 A 2 Bright A_Light(-2);
		TNT1 A 2 Bright A_Light( 3);
		TNT1 A 2 Bright A_Light( 2);
		TNT1 A 2 Bright A_Light( 1);
		Goto LightDone;
	}

	/*
	 * Determine ammotype at runtime! This is recalculated each tic it's held to
	 * properly handle the case where the ammotype cvar is changed in-game.
	 */
	override void DoEffect()
	{
		super.DoEffect();

		self.X_ResolveAmmoType();

		// if the item is owned, keep the internal ammo actor reference in sync
		// with the type. Otherwise, things go south real quick when firing.
		if(self.owner) {
			let ammo = Ammo(self.owner.FindInventory(self.AmmoType1));
			if(ammo) {
				self.Ammo1 = ammo;
			} else {
				// explicitly ensure the owner has an instance of the ammo
				// actor. Yep, we've got to explicitly give zero of the item. :D
				self.Ammo1 = AddAmmo(self.owner, self.AmmoType1, 0);
			}
		}
	}

	/*
	 * Resolve the ammo type when picking up a weapon so we can
	 * the right type of ammo.
	 */
	override bool TryPickup(in out Actor toucher)
	{
		self.X_ResolveAmmoType();
		return super.TryPickup(toucher);
	}

	/*
	 * Also do this when attaching, just in case the weapon is given
	 * via a script or somesuch. The actual ammo giving is done in
	 * Weapon's AttachToOwner override, so this is the last step.
	 */
	override void AttachToOwner(Actor other)
	{
		if(!self.Ammo1) {
			self.X_ResolveAmmoType();
		}
		super.AttachToOwner(other);
	}

	/*
	 * Dynamic ammo type function! Woohoo!
	 */
	void X_ResolveAmmoType() {
		if(GetCvar("arg_bfgammotype")) {
			// use custom "bfg cells" ammo type.
			self.AmmoType1 = 'ArgBFGAmmo';
			self.AmmoUse1  = 1;
			self.AmmoGive1 = 1;
			self.ammouse_classic = 1;
			self.ammouse_modern  = 1;
		
		} else {
			// use regular ol' cells
			self.AmmoType1 = 'Cell';
			self.AmmoUse1  = 40;
			self.AmmoGive1 = 40;
			self.ammouse_classic = 40;
			self.ammouse_modern  = 80;
		}
	}
	
	/*
	 * BFG charge sequence n' ammo check. Insert "lazer" meme here.
	 */
	action void X_ChargeBFG() {
		// overly complex ammo check function ohno
		if((GetCvar("arg_classicbfg") == true  && CountInv(invoker.AmmoType1) < invoker.ammouse_classic)
		 ||(GetCvar("arg_classicbfg") == false && CountInv(invoker.AmmoType1) < invoker.ammouse_modern )) {
			A_SelectWeapon("None", SWF_SELECTPRIORITY);
		} else {
			A_PlaySound("weapons/bfg/fire", CHAN_AUTO);
		}
	}

	/*
	 * BFG firin' function. Let 'er rip!
	 */
	action state X_FireBFG() {
		A_ZoomFactor(0.90, ZOOM_INSTANT|ZOOM_NOSCALETURNING);
		if(GetCvar("arg_classicbfg") == true) {
			A_FireProjectile("ArgThatDamnDragonAteMyBalls", 0, 0);
			A_TakeInventory(invoker.AmmoType1, invoker.ammouse_classic);
		} else {
			A_FireProjectile("ArgIveGotBallsOfSteel", 0, 0);
			A_TakeInventory(invoker.AmmoType1, invoker.ammouse_modern);
		}
		return A_Jump(64, "FireAlt");
	}
}

// classic mode

class ArgThatDamnDragonAteMyBalls : BFGBall
{
	Default
	{
		Scale 0.66;
		DeathSound "weapons/bfg/explode";
		Decal "BFGLightning";
		DamageType "ArgBFG9000";
		Obituary "$ARG_OB_BFG";

		+SKYEXPLODE
		+EXTREMEDEATH
	}
	States
	{
	Spawn:
		BFS1 A 0 NoDelay X_SpawnBFGOrbiters();
		BFS1 C 0 Bright ResolveState("Fly");
	Fly:
		BFS1 AAAABBBB 1 Bright X_BFGTrail();
		Loop;
	Death:
		BFE1 A 2 Bright X_BFGHit();
		BFE1 BAB 2 Bright;
		BFE1 C 0 Bright ResolveState("SuperDeath");
	SuperDeath:
		BFE1 C 4 Bright A_BFGSpray("ArgBFGSpray");
		BFE1 DEF 4 Bright;
		Stop;
	}

	void X_SpawnBFGOrbiters()
	{
		A_SpawnItemEx("ArgBFGOrbiter1", 0,  00.000, -16.000, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_ORIGINATOR|SXF_SETMASTER);
		A_SpawnItemEx("ArgBFGOrbiter2", 0, -13.856,  08.000, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_ORIGINATOR|SXF_SETMASTER);
		A_SpawnItemEx("ArgBFGOrbiter3", 0,  13.856,  08.000, 0, 0, 0, 0, SXF_NOCHECKPOSITION|SXF_ORIGINATOR|SXF_SETMASTER);
	}
	
	void X_BFGTrail()
	{
		A_SpawnItemEx("ArgBFGTrail", frandom(-2,2), frandom(-2,2), frandom(-2,2), 0, 0, 0, 0, SXF_CLIENTSIDE, 0);
	}
	
	void X_BFGHit()
	{
		for(int i = 0; i < 20; i++) {
			A_SpawnItemEx("ArgBFGImpactFX", 0, frandom(-10,10), frandom(-10,10), 0, frandom(-4,4), frandom(-4,4), 0, SXF_CLIENTSIDE, 0);
		}
		A_SetScale(1.0);
		A_Quake(2, 5, 0, 384);
		A_KillChildren("Normal", KILS_KILLMISSILES|KILS_NOMONSTERS);
	}
}

class ArgBFGOrbiter1 : ArgTrail
{
	Default
	{
		Scale 0.25;
		Renderstyle 'Add';
		WeaveIndexXY 0;
		WeaveIndexZ  48;
		Damage 0;

		+MISSILE
		+NOINTERACTION
	}
	States
	{
	Spawn:
		BFS1 AABB 1 Bright NoDelay X_BFGOrbiterTrail();
		Loop;
	Death:
		TNT1 AAAAAAAA 0 X_BFGOrbiterDeathFX();
		TNT1 A 1;
		Stop;
	}

	void X_BFGOrbiterTrail()
	{
		A_SpawnItemEx("ArgBFGTrailSmall", frandom(-2,2), frandom(-2,2), frandom(-2,2), 0, 0, 0, 0, SXF_CLIENTSIDE, 0);
		A_Warp(AAPTR_MASTER, 0, 0, 0, 0, WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
		A_Weave(2, 2, 8.0, 8.0);
	}

	void X_BFGOrbiterDeathFX()
	{
		A_SpawnItemEx("ArgBFGTrailSmall", 0, frandom(-5,5), frandom(-5,5), 0, frandom(-2.5,2.5), frandom(-2.5,2.5), 0, SXF_CLIENTSIDE, 0);
	}
}
class ArgBFGOrbiter2 : ArgBFGOrbiter1 { Default { WeaveIndexXY 21; WeaveIndexZ  5; } }
class ArgBFGOrbiter3 : ArgBFGOrbiter1 { Default { WeaveIndexXY 42; WeaveIndexZ 26; } }

class ArgBFGTrail : ArgTrailNoPhysics
{
	Default
	{
		Renderstyle 'Add';
		Alpha 0.75;
		Scale 0.75;
	}
	States
	{
	Spawn:
		BTRL ABCD 3 Bright;
		Stop;
	}
}
class ArgBFGTrailSmall : ArgBFGTrail
{
	Default
	{
		Scale 0.5;
	}
}
class ArgBFGImpactFX : ArgBFGTrail
{
	States
	{
	Spawn:
		BTRL AAAAAAAABBBBCCCCDDDD 1 Bright A_FadeOut(0.025);
		Stop;
	}
}

class ArgBFGSpray : Actor
{
	Default
	{
		RenderStyle 'Add';
		Alpha 0.75;

		+NOBLOCKMAP
		+NOGRAVITY
		+BLOODSPLATTER
		+EXTREMEDEATH
	}
	States
	{
	Spawn:
		BFE2 A 0;
		BFE2 A 0 A_PlaySound("weapons/bfg/spray");
		BFE2 AAAAAAAAAAAAAAAA         0        X_BFGSprayFX(5.0);
		BFE2 AAAAAABBBBBBCCCCCCDDDDDD 1 Bright X_BFGSprayFX(2.5);
		Stop;
	}

	void X_BFGSprayFX(float spd)
	{
		A_SpawnItemEx("ArgBFGTrailSmall", frandom(-10,10), frandom(-10,10), frandom(-10,10), frandom(-2.5,2.5), frandom(-spd,spd), frandom(-spd,spd), 0, SXF_CLIENTSIDE, 0);
	}
}

// modern mode

class ArgIveGotBallsOfSteel : ArgThatDamnDragonAteMyBalls
{
	Actor whoFiredMe;
	LookExParams lookParams;

	Default
	{
		Speed 20;

		+FRIENDLY
	}
	States
	{
	Fly:
		BFS1 AAAABBBB 1 Bright X_ModernBFGZap();
		Loop;
	SuperDeath:
		BFE1 C 4 Bright X_ModernBFGHit();
		BFE1 DEF 4 Bright;
		Stop;
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();

		// set up default look params
		self.lookParams.fov     = ARG_BFG_ZAP_ARC;
		self.lookParams.maxdist = ARG_BFG_ZAP_DIST;
		self.lookParams.flags  |= LOF_NOSOUNDCHECK;

		// set up friendliness
		if(self.target) {
			self.whoFiredMe = self.target;
			SetFriendPlayer(self.target.player);
		}
	}

	void X_ModernBFGZap()
	{
		// go around in a circle and zap things in an n-degree slice.
		float origAngle = self.angle;
		for(int a = 0; a < 360; a += lookParams.fov) {
			self.angle = origAngle + a;

			// temporarily null the target and search for a new one in an arc.
			// if we've got it, do the zap.
			// [NOTE] this will not target enemy players. This is OK, frankly.
			//        if I ever restore this, be sure to re-add $ARG_OB_BFGZAP
			if(LookForEnemies(false, self.lookParams)) {

				// do a test trace to make sure the person who fired the shot
				// (or an ally) isn't in the way. That would be slightly
				// unfortunate. ;)
				FTranslatedLineTarget aimedAt;
				AimLineAttack(self.AngleTo(self.target), self.lookParams.maxdist, aimedAt);
				if(aimedAt.linetarget && aimedAt.linetarget != self.whoFiredMe && !aimedAt.linetarget.isFriend(self.whoFiredMe)) {
					A_CustomRailgun(25
					,	flags: RGF_SILENT | RGF_NOPIERCING
					,	aim: 1
					,	maxdiff: 32
					,	pufftype: "ArgBFGSprayZ"
					,	sparsity: 4
					,	spawnclass: "ArgBFGZapperTrail"
					,	spawnofs_z: -8
					);
				}
			}
		}
		self.target = self.whoFiredMe;
		self.angle = origAngle;
		A_SpawnItemEx("ArgBFGTrail", frandom(-2,2), frandom(-2,2), frandom(-2,2), 0, 0, 0, 0, SXF_CLIENTSIDE, 0);
	}

	void X_ModernBFGHit()
	{
		A_BFGSpray("ArgBFGSpray", 20, 40, 360, 1024, 32, 0, BFGF_MISSILEORIGIN);
		A_RadiusDamageSelf(48, 96, RDSF_BFGDAMAGE, "ArgBFGSpray");
	}
}

class ArgBFGSprayZ : ArgBFGSpray
{
	Default
	{
		Damagetype "ArgBFGZapper";
	}
}

class ArgBFGZapperTrail : ArgTrailNoPhysics
{
	Default
	{
		Renderstyle 'Add';
		Alpha 0.75;
		Scale 0.75;
	}
	States
	{
	Spawn:
		BFE2 D 2 Bright;
		BTRL D 1 Bright;
		Stop;
	}
}
