// --------------------------------------------------------------------------
//
// ARGENT: Pistol
//
// --------------------------------------------------------------------------

class ArgPistol : ArgWeapon replaces Pistol
{	
	ArgCounter charge;
	
	override void BeginPlay()
	{
		Super.BeginPlay();
		charge.init(0, 45, 68);
	}

	Default
	{
		Weapon.SelectionOrder 9;
		Inventory.Icon "graphics/hud/weapon-pistol.png";
		Inventory.PickupMessage "$ARG_GOT_PISTOL";
		Tag "$ARG_TAG_PISTOL";
		Obituary "$ARG_OB_PISTOL";
		DamageType "ArgPistol";
		ArgWeapon.Crosshair ARG_XH_PISTOL_IDLE;

		+WEAPON.NOALERT
		+WEAPON.NOAUTOFIRE
		+WEAPON.WIMPY_WEAPON
	}
	States
	{
	Spawn:
		PISP A -1;
		Stop;
	Ready:
		PISG A 1 A_WeaponReady(WRF_ALLOWRELOAD);
		Loop;
	Select:
		PISG A 0 Arg_A_PistolReset(false);
		Goto SelectLoop;
	Deselect:
		PISG A 0 Arg_A_PistolReset();
		Goto DeselectLoop;
	Fire:
		PISF A 1 Bright Arg_A_PistolFire();
		PISF B 1   A_WeaponReady(WRF_NOFIRE | WRF_NOSWITCH);
		PISF C 1 { A_WeaponReady(WRF_NOFIRE | WRF_NOSWITCH); Arg_A_WeaponOffset(1.0, 1.0, -0.25      ); }
		PISF C 1 { A_WeaponReady(WRF_NOFIRE | WRF_NOSWITCH); Arg_A_WeaponOffset(2.5, 5.5, -0.05      ); }
		PISF B 1 { A_WeaponReady(WRF_NOFIRE | WRF_NOSWITCH); Arg_A_WeaponOffset(3.5, 9.0, -0.05, 1.00); }
		PISF B 1 { A_WeaponReady(WRF_NOFIRE | WRF_NOSWITCH); Arg_A_WeaponOffset(1.0, 6.0, -0.25      ); }
		PISG A 1   A_WeaponReady(WRF_NOFIRE | WRF_NOSWITCH);
		PISG AAAAA 1 A_WeaponReady(WRF_ALLOWRELOAD);
		PISG A 0 A_Refire;
		Goto Ready;
	AltFire:
		PISA D 1 { Arg_A_WeaponOffset(- 2.0,  0.0); A_SetCrosshair(ARG_XH_PISTOL_ANIM1); A_PlaySound("weapons/pistol/charge", CHAN_WEAPON); }
		PISA D 1 { Arg_A_WeaponOffset(- 6.0,  0.0); A_SetCrosshair(ARG_XH_PISTOL_ANIM2); }
		PISA C 1 { Arg_A_WeaponOffset(-12.0, -0.5); A_SetCrosshair(ARG_XH_PISTOL_ANIM3); }
		PISA C 1 { Arg_A_WeaponOffset(-16.0, -1.0); A_SetCrosshair(ARG_XH_PISTOL_ANIM4); }
		PISA B 1 { Arg_A_WeaponOffset(-18.0, -0.5); A_SetCrosshair(ARG_XH_PISTOL_CHARGED); }
	AltHold:
		PISA A 1 Arg_A_PistolCharge();
		PISA A 0 A_Refire();
		Goto AltDown;
	AltShoopDaWoop:
		PISB A 1 Bright Arg_A_PistolAltFire();
		PISB B 1 Arg_A_WeaponOffset(-19.0,- 1.0);
		PISB B 1 Arg_A_WeaponOffset(-17.0,  3.0);
		PISB C 1 Arg_A_WeaponOffset(-13.0,  7.0);
		PISB C 1 Arg_A_WeaponOffset(- 9.0, 10.0);
		PISB C 1 Arg_A_WeaponOffset(- 4.0, 16.0);
		PISB C 1 Arg_A_WeaponOffset(- 2.0, 18.0);
		PISB B 1 Arg_A_WeaponOffset(- 3.0, 17.0);
		PISB B 1 Arg_A_WeaponOffset(- 7.0, 14.0);
		PISB B 1 Arg_A_WeaponOffset(-12.0, 10.0);
		PISA A 1 Arg_A_WeaponOffset(-16.0,  7.0);
		PISA A 1 Arg_A_WeaponOffset(-18.0,  3.0);
		PISA A 1 Arg_A_WeaponOffset(-19.0,  1.0);
		PISA A 1 Arg_A_WeaponOffset(-19.0,- 1.0);
		PISA A 4 Arg_A_WeaponOffset(-20.0,- 2.0);
	AltDown:
		PISA B 1 { Arg_A_WeaponOffset(-18.0,-0.5); A_SetCrosshair(ARG_XH_PISTOL_ANIM4); Arg_A_PistolReset(); }
		PISA C 1 { Arg_A_WeaponOffset(-16.0,-1.0); A_SetCrosshair(ARG_XH_PISTOL_ANIM3); }
		PISA C 1 { Arg_A_WeaponOffset(-12.0,-0.5); A_SetCrosshair(ARG_XH_PISTOL_ANIM2); }
		PISA D 1 { Arg_A_WeaponOffset(- 6.0, 0.0); A_SetCrosshair(ARG_XH_PISTOL_ANIM1); }
		PISA D 1 { Arg_A_WeaponOffset(- 2.0, 0.0); A_SetCrosshair(invoker.crosshair  ); }
		PISG A 0 A_Refire("AltFire");
		Goto Ready;
	Flash:
		TNT1 A 2 Bright A_Light1();
		Goto LightDone;
	}
	
	/*
	 * Pistol fire. Simple stuff.
	 */
	action void Arg_A_PistolFire() {
		Arg_A_GunFlash('Flash', "weapons/pistol/fire", ARG_GF_ALTSOUND | ARG_GF_BOB);
		A_FireBullets(1.5, 1, 1, 5, "ArgPistolPuff");
	}
	
	/*
	 * Pistol charge. The longer it's held, the longer it goes.
	 * This function is responsible for checking if the fire button
	 * is pressed (via synthfire) and jumping to the shoot state if so.
	 */
	action state Arg_A_PistolCharge() {
		invoker.charge.inc();
		if(!invoker.charge.isMax()) {
			Arg_A_WeaponOffset(-20, -2, invoker.charge.val * -0.025);
		} else {
			Arg_A_WeaponOffset(-20, -2, 0.25);
		}
		if(invoker.charge.isOver()) {
			A_PlaySound("weapons/pistol/hum", CHAN_WEAPON, 1.0, true);
		}
		return Arg_A_SynthFire("AltShoopDaWoop");
	}
	
	/*
	 * Pistol altfire. Spends all accumulated charge in one big power-shot.
	 */
	action void Arg_A_PistolAltFire() {
		Arg_A_GunFlash('Flash', "weapons/pistol/altfire");
		A_FireBullets(1.5, 1, 1, 2*invoker.charge.get(), "ArgPistolPuff", FBF_NORANDOM);
		A_StopSound(CHAN_WEAPON);
	}
	
	/*
	 * Resets pistol charge state.
	 */
	action void Arg_A_PistolReset(bool stopSound = true) {
		if(stopSound) {
			A_StopSound(CHAN_WEAPON);
		}
		A_ClearRefire();
		invoker.charge.toMin();
	}
	
	/*
	 * Crosshair augments.
	 */
	override void Arg_DrawCrosshairAugment(ArgStatusBar statusbar, int state, double TicFrac, Vector2 scale) {
		if(charge.val > 0) {
			statusbar.DrawImage("graphics/xhairs/augments/test-charge.png", (0, 0), statusbar.DI_ITEM_OFFSETS, scale: scale);
		}
	}
}

class ArgPistolPuff : ArgBulletPuff
{
	Default
	{
		Translation "80:111=[143,143,255]:[0,0,83]", "160:167=[143,143,255]:[0,0,83]", "208:223=[143,143,255]:[0,0,83]", "224:231=[143,143,255]:[199,199,255]";
	}
	States
	{
	Spawn:
		XPUF Q 0 BRIGHT;
		XPUF Q 0 A_SpawnItemEx("ArgPuffSmoke",0,0,4.0+0.1*random(-10,10),0,0,0,0,SXF_CLIENTSIDE,0);
		XPUF Q 0 A_Jump(128,"PuffMirrored");
	PuffNormal:
		XPUF QRSTU 1 BRIGHT;
		XPUF FGH 1 BRIGHT;
		Stop;
	PuffMirrored:
		XPUF VWXYZ 1 BRIGHT;
		XPUF NOP 1 BRIGHT;
		Stop;
	}
}
