// --------------------------------------------------------------------------
//
// ARGENT: Moddable Weapon Definition
//
// --------------------------------------------------------------------------

/*
 * Base class for moddable weapons, containing all the cool common code
 * for swapping and equipping mods (as well as handling various facets
 * of mod fires like the usual "altfire to charge, fire-to-fire" system).
 *
 * BTW, that's "moddable" in the Doom 4 sense, for all those confused.
 * Of course all weapons in ARGENT itself are "mod weapons". ;)
 */
class ArgModWeapon : ArgWeapon
{
	/*
	 * Mod definition & control.
	 */
	ArgMod modSelected;
	ArgMod mod1;
	ArgMod mod2;

	int    init_mod1_ammoUse; // custom property drivers
	int    init_mod1_cooldown;
	int    init_mod1_cooldown_over;
	int    init_mod1_charge;
	int    init_mod1_charge_over;
	string init_mod1_tag;
	string init_mod1_description;
	string init_mod1_icon;
	string init_mod1_pic;

	int    init_mod2_ammoUse;
	int    init_mod2_cooldown;
	int    init_mod2_cooldown_over;
	int    init_mod2_charge;
	int    init_mod2_charge_over;
	string init_mod2_tag;
	string init_mod2_description;
	string init_mod2_icon;
	string init_mod2_pic;

	property Mod1AmmoUse    : init_mod1_ammoUse;
	property Mod1Cooldown   : init_mod1_cooldown, init_mod1_cooldown_over;
	property Mod1Charge     : init_mod1_charge, init_mod1_charge_over;
	property Mod1Tag        : init_mod1_tag;
	property Mod1Description: init_mod1_description;
	property Mod1Icon       : init_mod1_icon;
	property Mod1Pic        : init_mod1_pic;

	property Mod2AmmoUse    : init_mod2_ammoUse;
	property Mod2Cooldown   : init_mod2_cooldown, init_mod2_cooldown_over;
	property Mod2Charge     : init_mod2_charge, init_mod2_charge_over;
	property Mod2Tag        : init_mod2_tag;
	property Mod2Description: init_mod2_description;
	property Mod2Icon       : init_mod2_icon;
	property Mod2Pic        : init_mod2_pic;

	/*
	 * Actor States n' Defaults
	 */
	Default
	{
		ArgModWeapon.Mod1AmmoUse 1;
		ArgModWeapon.Mod1Cooldown 0, 0;
		ArgModWeapon.Mod1Charge 0, 0;
		ArgModWeapon.Mod1Tag "Mod 1";
		ArgModWeapon.Mod1Description "THIS SURE IS A MOD";
		ArgModWeapon.Mod1Icon "";
		ArgModWeapon.Mod1Pic "";

		ArgModWeapon.Mod2AmmoUse 1;
		ArgModWeapon.Mod2Cooldown 0, 0;
		ArgModWeapon.Mod2Charge 0, 0;
		ArgModWeapon.Mod2Tag "Mod 1";
		ArgModWeapon.Mod2Description "THIS SURE IS A MOD";
		ArgModWeapon.Mod2Icon "";
		ArgModWeapon.Mod2Pic "";

		+WEAPON.NOALERT
		+WEAPON.AMMO_OPTIONAL
		+WEAPON.ALT_AMMO_OPTIONAL
	}
	States
	{
	
	/* Ready Mod-Jump */
	
	Ready:
		"####" "#" 0 {
			A_ClearReFire();
			return Arg_A_JumpMod("Mod1Ready", "Mod2Ready", "Mod0Ready");
		}
	Mod0Ready:
	Mod1Ready:
	Mod2Ready:
	ReadyLoop:
		"####" "#" 1 A_WeaponReady(WRF_ALLOWRELOAD);
		Loop;
		
	/* Select Mod-Jump */
	
	Select:
		"####" "#" 0 Arg_A_JumpMod("Mod1Select", "Mod2Select", "Mod0Select");
	Mod0Select:
	Mod1Select:
	Mod2Select:
		Goto SelectLoop;
		
	/* Fire Mod-Jump -- need to make sure we're not holding down altfire. */
	
	Fire:
		"####" "#" 0 Arg_A_TryFire();
		Goto DontFire;
	Mod0Fire:
		"####" "#" 1;
		Goto Ready;
		
	/* Deselect doesn't need a mod jump since it's just "####" anyway. */
	
	Deselect:
		"####" "#" 0 {
			A_ZoomFactor(1.0);
			A_SetCrosshair(0);
		}
		Goto DeselectLoop;
		
	/* Mod Swapping. Uses the Reload bind for convenience. */
	
	Reload:
		// call the swap function and start the animation if successful
		"####" "#" 0 Arg_A_TrySwapMod();
	ModSwapDown:
		// lower the weapon and jump to the raise animation
		"####" "########" 1 A_WeaponOffset(0.0, 12.0, WOF_KEEPX | WOF_ADD);
		"####" "#" 0 Arg_A_StartModRaise();
	Mod1Raise:
	Mod2Raise:
	ModSwapUp:
		// raise the weapon & start the swap animation
		"####" "########" 1 A_WeaponOffset(0.0,-12.0, WOF_KEEPX | WOF_ADD);
		"####" "#" 0 Arg_A_JumpMod("Mod1Swap", "Mod2Swap");
	Mod1Swap:
	Mod2Swap:
		Goto WeaponIdle;
		
	/* Mod Firing. Maximum Dangertime. */
	
	AltFire:
		"####" "#" 0 Arg_A_TryAltFire();
	AltHold:
		"####" "#" 0 Arg_A_JumpMod("Mod1Hold", "Mod2Hold");
		Goto DontFire;
	ModDown:
		"####" "#" 0 Arg_A_JumpMod("Mod1Down", "Mod2Down");
		Goto DontFire;
	Mod1Up:
	Mod2Up:
	Mod1Hold:
	Mod2Hold:
	Mod1Down:
	Mod2Down:
	DontFire:
		"####" "#" 1 A_WeaponReady(WRF_NOFIRE);
		Goto Ready;
	Cooldown:
		"####" "#" 0 Arg_A_StartModCooldown();
		Goto Ready;
	}

	/*
	 * Overridden BeginPlay function, for special shit.
	 */
	override void BeginPlay()
	{
		Super.BeginPlay();
		mod1 = new('ArgMod');
		mod2 = new('ArgMod');
		
		// Initialize mods from properties
		mod1.ammoUse        = init_mod1_ammoUse;
		mod1.cooldown.init(0, init_mod1_cooldown, max(init_mod1_cooldown_over, init_mod1_cooldown));
		mod1.charge.init  (0, init_mod1_charge  , max(init_mod1_charge_over  , init_mod1_charge  ));
		mod1.tag            = StringTable.Localize(init_mod1_tag);
		mod1.description    = StringTable.Localize(init_mod1_description);
		mod1.icon           = StringTable.Localize(init_mod1_icon);
		mod1.pic            = StringTable.Localize(init_mod1_pic);

		mod2.ammoUse        = init_mod2_ammoUse;
		mod2.cooldown.init(0, init_mod2_cooldown, max(init_mod2_cooldown_over, init_mod2_cooldown));
		mod2.charge.init  (0, init_mod2_charge  , max(init_mod2_charge_over  , init_mod2_charge  ));
		mod2.tag            = StringTable.Localize(init_mod2_tag);
		mod2.description    = StringTable.Localize(init_mod2_description);
		mod2.icon           = StringTable.Localize(init_mod2_icon);
		mod2.pic            = StringTable.Localize(init_mod2_pic);
		
		// Set MinSelAmmo1 to 1 for all mod weapons to thwart +AMMO_OPTIONAL;
		// this is a special value that tells BestWeapon (the "switch to
		// highest-priority weapon when running out of ammo" function) to
		// ENSURE that you have at least 1 unit of ammo before picking it.
		// It is NOT checked when selecting the weapon manually, which is
		// precisely what we want since weapons need to be selectable to mod them.
		
		// Oddly, this value isn't exposed via a property, so we've got to
		// set it in a function. Welpo.
		let this = ArgModWeapon(self);
		this.MinSelAmmo1 = 1;
	}

	/*
	 * Overridden Tick function, for extra-special shit.
	 */
	override void Tick()
	{
		Super.Tick();
		
		// Subtract 1 from mod cooldown every tick, no matter
		// what else happens. Huzzah!
		let this = ArgModWeapon(self);
		this.mod1.cooldown.dec();
		this.mod2.cooldown.dec();
	}

	/*
	 * Jump to one of two states depending on which mod is selected.
	 * If no mods are selected, no state jump occurs.
	 */
	action state Arg_A_JumpMod(statelabel mod1label, statelabel mod2label, statelabel mod0label = null, bool checkCooldown = false) {
		// Jump to either the mod 1 or mod 2 state depending on which exists.
		// Optionally, check if cooldown is complete first.
		if(invoker.modSelected == invoker.mod1 && (!checkCooldown || invoker.mod1.cooldown.get() == 0)) {
			return ResolveState(mod1label);

		} else if(invoker.modSelected == invoker.mod2 && (!checkCooldown || invoker.mod2.cooldown.get() == 0)) {
			return ResolveState(mod2label);

		} else {
			return ResolveState(mod0label);
		}
	}

	/*
	 * Try to fire -- fail if we're already holding down altfire though, and
	 * leap to the mod install state if we've got a merch menu open instead.
	 */
	action state Arg_A_TryFire() {
		if(!Arg_SynthAltFire() && Arg_A_CheckAmmo()) {
			return ResolveState("Mod0Fire");
		} else {
			return ResolveState("DontFire");
		}
	}

	/*
	 * Try to altfire -- same as above for altfire, effectively. We may abort
	 * to install a mod or do other shiz.
	 */
	action state Arg_A_TryAltFire() {
		// special junk: allow mods which take 0 ammo (e.g. plasma heat blast).
		int altAmmoUse = -1;
		if(invoker.modSelected) {
			altAmmoUse = min(invoker.modSelected.ammoUse, 1);
		}

		// now do the actual junk
		if(Arg_A_CheckAmmo(altAmmoUse)) {
			return Arg_A_JumpMod("Mod1Up", "Mod2Up", "DontFire", true);
		} else {
			return ResolveState("DontFire");
		}
	}

	/*
	 * Try n' swap the currently-selected mod. If successful (i.e. we have
	 * mods and the merch menu isn't up), jump to the mod swap state.
	 */
	action state Arg_A_TrySwapMod() {
	
		// first, cycle through the mod kit if we're in the menu.
		state cycleState = Arg_A_CycleMerch();
		if(cycleState) {
			return cycleState;

		} else {
			// Do a mod swap.
			// determine what to swap to. Hooray goofy extra logic for zero.
			int modToSelect = 0;
			if(invoker.modSelected == invoker.mod1 && invoker.mod2.enabled) {
				modToSelect = 2;
			} else if(invoker.modSelected == invoker.mod2 && invoker.mod1.enabled) {
				modToSelect = 1;
			} else if(!invoker.modSelected) {
				if(invoker.mod1.enabled) {
					modToSelect = 1;
				} else if(invoker.mod2.enabled) {
					modToSelect = 2;
				}
			}

			// if we've successfully done a swap, initiate the animation.
			if(modToSelect > 0) {
				invoker.modSelected = (modToSelect == 1) ? invoker.mod1 : invoker.mod2;
				return ResolveState("ModSwapDown");
			} else {
				return ResolveState("WeaponIdle");
			}
		}
	}
	
	/*
	 * Start the cooldown cycle for the selected mod.
	 */
	action void Arg_A_StartModCooldown() {
		A_ClearReFire();
		if(invoker.modSelected) {
			invoker.modSelected.cooldown.toMax();
		}
	}
	
	/*
	 * Clear the cooldown cycle for the selected mod.
	 * Generally done on weapon swap.
	 */
	action void Arg_A_ClearModCooldown() {
		if(invoker.modSelected) {
			invoker.modSelected.cooldown.toMin();
		}
	}
	
	/*
	 * Start the mod raise animation.
	 */
	action state Arg_A_StartModRaise() {
		Arg_A_ClearModCooldown();
		return Arg_A_JumpMod("Mod1Raise", "Mod2Raise");
	}
}
