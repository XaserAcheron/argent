// --------------------------------------------------------------------------
//
// ARGENT: Plasma Rifle
//
// --------------------------------------------------------------------------

class ArgPlasmaRifle : ArgModWeapon replaces PlasmaRifle
{
	Default
	{
		Weapon.SelectionOrder 4;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 40;
		Weapon.AmmoType "Cell";
		Inventory.Icon "graphics/hud/weapon-plasma.png";
		Inventory.PickupMessage "$ARG_GOT_PLASMA";
		Tag "$ARG_TAG_PLASMA";

		ArgModWeapon.Mod1Tag "$ARG_MOD_TAG_PLASMA_1";
		ArgModWeapon.Mod1Description "$ARG_MOD_DESC_PLASMA_1";
		ArgModWeapon.Mod1Icon "$ARG_MOD_ICON_PLASMA_1";
		ArgModWeapon.Mod1Pic "$ARG_MOD_PIC_PLASMA_1"; 
		ArgModWeapon.Mod1AmmoUse 0; // pointless, but may as well be explicit. shit.
		ArgModWeapon.Mod1Charge 120, 0;

		ArgModWeapon.Mod2Tag "$ARG_MOD_TAG_PLASMA_2";
		ArgModWeapon.Mod2Description "$ARG_MOD_DESC_PLASMA_2";
		ArgModWeapon.Mod2Icon "$ARG_MOD_ICON_PLASMA_2";
		ArgModWeapon.Mod2Pic "$ARG_MOD_PIC_PLASMA_2"; 
		ArgModWeapon.Mod2AmmoUse 2;
		ArgModWeapon.Mod2Cooldown 200, 0;
	}
	States
	{
	Spawn:
		PLSP A -1;
		Stop;
	Ready:
		PLSG A 0;
		Goto Super::Ready;

	/* Unmodded + Primary */

	Mod0Select:
		PLSG A 0;
		Goto SelectLoop;
	Mod0Ready:
		PLSG A 0;
		Goto ReadyLoop;
	Mod0Fire:
		"####" B 1 Bright {
			Arg_A_GunFlash();
			A_FireProjectile("ArgPlasma", 0, 1, 6.0 + frandom(-2.00, 2.00), frandom(-2.00, 2.00));
			Arg_A_WeaponOffset(0, 0);
			if(invoker.modSelected == invoker.mod1) {
				invoker.mod1.charge.inc(3);
				A_PlaySound("weapons/plasma/altfire", CHAN_5);
				return ResolveState("Mod1FirePrimary");
			} else {
				A_PlaySound("weapons/plasma/fire", CHAN_5);
			}
			return ResolveState(null);
		}
		"####" C 1 Bright Arg_A_WeaponOffset(2.50, 1.500, 0.75, 0.250);
		"####" A 1        Arg_A_WeaponOffset(2.25, 0.875, 1.25, 0.375);
		Goto Ready;
	Flash:
		TNT1 A 1 Bright A_Light(2);
		TNT1 A 1 Bright A_Light(1);
		Goto LightDone;

	/* Mod 1: Heat Blast */
		
	Mod1Select:
		PL1G A 0;
		Goto SelectLoop;
	Mod1Raise:
		PL1S A 0;
		Goto ModSwapUp;
	Mod1Swap:
		PL1S A 8 A_PlaySound("weapons/plasma/mod1swap", CHAN_AUTO);
		PL1S B 1 Arg_A_WeaponOffset(  0.0, 0.0);
		PL1S C 1 Arg_A_WeaponOffset(- 1.0, 0.0);
		PL1S D 1 Arg_A_WeaponOffset(- 3.0, 0.5);
		PL1S E 1 Arg_A_WeaponOffset(- 5.0, 1.0);
		PL1S F 1 Arg_A_WeaponOffset(- 6.0, 2.0);
		PL1S GH 1;
		PL1S I 6;
		PL1S I 1 Arg_A_WeaponOffset(- 7.0, 3.0);
		PL1S J 1 Arg_A_WeaponOffset(- 8.0, 4.0);
		PL1S J 1 Arg_A_WeaponOffset(-10.0, 6.0);
		PL1S K 1 Arg_A_WeaponOffset(-12.0, 8.0);
		PL1S K 1 Arg_A_WeaponOffset(-13.0, 9.0);
		PL1S K 1 Arg_A_WeaponOffset(-13.0, 9.0);
		PL1S K 1 Arg_A_WeaponOffset(-12.0, 8.0);
		PL1S K 1 Arg_A_WeaponOffset(-10.0, 6.0);
		PL1S K 1 Arg_A_WeaponOffset(- 8.0, 4.0);
		PL1S L 1 Arg_A_WeaponOffset(- 6.0, 3.0);
		PL1S M 1 Arg_A_WeaponOffset(- 4.0, 2.0);
		PL1S N 1 Arg_A_WeaponOffset(- 2.0, 1.0);
		PL1S O 1 Arg_A_WeaponOffset(- 1.0, 0.0);
		PL1S O 6 Arg_A_WeaponOffset(  0.0, 0.0);
		PL1S PQRS 2;
		PL1G AAAAAAAAAAAA 1 A_WeaponReady(WRF_ALLOWRELOAD);
		PL1A GGGFFFEEEDDDBBBCCCDDDEEEFFFGGG 1 A_WeaponReady(WRF_ALLOWRELOAD);
	Mod1Ready:
		PL1G D 0 {
			if(invoker.mod1.charge.val >=  invoker.mod1.charge.max       ) { return ResolveState("Mod1ReadyD"); }
			if(invoker.mod1.charge.val >= (invoker.mod1.charge.max/4) * 3) { return ResolveState("Mod1ReadyC"); }
			if(invoker.mod1.charge.val >= (invoker.mod1.charge.max/4) * 2) { return ResolveState("Mod1ReadyB"); }
			if(invoker.mod1.charge.val >= (invoker.mod1.charge.max/4)    ) { return ResolveState("Mod1ReadyA"); }
			return ResolveState(null);
		}
		PL1G A 0;
		Goto ReadyLoop;
	Mod1ReadyA:
		PL1A FFFGGG 1 A_WeaponReady(WRF_ALLOWRELOAD);
		PL1G AAA    1 A_WeaponReady(WRF_ALLOWRELOAD);
		PL1A GGGFFF 1 A_WeaponReady(WRF_ALLOWRELOAD);
		Loop;
	Mod1ReadyB:
		PL1A EEEFFFGGGFFFEEE 1 A_WeaponReady(WRF_ALLOWRELOAD);
		Loop;
	Mod1ReadyC:
		PL1A DDDEEEFFFEEEDDD 1 A_WeaponReady(WRF_ALLOWRELOAD);
		Loop;
	Mod1ReadyD:
		PL1G DDDEEEFFFGGGHHH 1 A_WeaponReady(WRF_ALLOWRELOAD);
		Loop;
	Mod1FirePrimary:
		// extra special animation stuffs for heatblast's primary fire
		PL1G K 1 Bright {
			if(invoker.mod1.charge.val >=  invoker.mod1.charge.max   ) { return ResolveState("Mod1FirePrimaryB"); }
			if(invoker.mod1.charge.val >= (invoker.mod1.charge.max/4)) { return ResolveState("Mod1FirePrimaryA"); }
			return ResolveState(null);
		}
		PL1G L 1 Bright Arg_A_WeaponOffset(2.50, 1.500, 0.75, 0.250);
		PL1G A 1        Arg_A_WeaponOffset(2.25, 0.875, 1.25, 0.375);
		Goto Mod1Ready;
	Mod1FirePrimaryA:
		PL1G B 1 Bright;
		PL1G C 1 Bright Arg_A_WeaponOffset(2.50, 1.500, 0.75, 0.250);
		PL1A D 1        Arg_A_WeaponOffset(2.25, 0.875, 1.25, 0.375);
		Goto Mod1Ready;
	Mod1FirePrimaryB:
		PL1G I 1 Bright;
		PL1G J 1 Bright Arg_A_WeaponOffset(2.50, 1.500, 0.75, 0.250);
		PL1A D 1        Arg_A_WeaponOffset(2.25, 0.875, 1.25, 0.375);
		Goto Mod1Ready;
	Mod1Up:
		PL1G A 1 {
			if(invoker.mod1.charge.val >= (invoker.mod1.charge.max/4)) {
				return ResolveState("Mod1Hold");
			}
			return ResolveState(null);
		}
		Goto Mod1Ready;
	Mod1Hold:
		PL1A A 1 Bright {
			Arg_A_GunFlash('Flash', "weapons/plasma/mod1fire");
			A_Explode(invoker.mod1.charge.val * 3, 160, XF_NOTMISSILE, 0, 128);
			A_Blast(BF_NOIMPACTDAMAGE, invoker.mod1.charge.val * 2, 160, 20, "ArgNothing", "");
			invoker.mod1.charge.toMin();
			
			// cool heatwave fx
			A_Quake(2, 8, 0, 8, "");
			for(int i = -40; i <= 40; i += 10) {
				A_FireProjectile("ArgPlasmaHeatWave", i, 0, 0, 0, FPF_NOAUTOAIM);
			}
		}
		PL1A B 1 Arg_A_WeaponOffset( 5.0,  5.0);
		PL1A B 1 Arg_A_WeaponOffset(12.0, 12.0);
		PL1A C 1 Arg_A_WeaponOffset(15.0, 15.0);
		PL1A C 1 Arg_A_WeaponOffset(16.0, 16.0);
		PL1A D 1 Arg_A_WeaponOffset(14.0, 14.0);
		PL1A D 1 Arg_A_WeaponOffset(11.0, 11.0);
		PL1A E 1 Arg_A_WeaponOffset( 8.0,  8.0);
		PL1A E 1 Arg_A_WeaponOffset( 4.0,  4.0);
		PL1A F 1 Arg_A_WeaponOffset( 1.0,  1.0);
		PL1A G 1 Arg_A_WeaponOffset( 0.0,  0.0);
		Goto Mod1Ready;

	/* Mod 2: Stun Bomb */
		
	Mod2Select:
		PL2G A 0;
		Goto SelectLoop;
	Mod2Raise:
		PL2S A 0;
		Goto ModSwapUp;
	Mod2Swap:
		PL2S A 1 {
			A_PlaySound("weapons/plasma/mod2swap", CHAN_AUTO);
			invoker.mod1.charge.toMin();
		}
		PL2S B 1 Arg_A_WeaponOffset(  0.0, 0.0);
		PL2S C 1 Arg_A_WeaponOffset(- 1.0, 0.0);
		PL2S D 1 Arg_A_WeaponOffset(- 3.0, 0.5);
		PL2S E 1 Arg_A_WeaponOffset(- 5.0, 1.0);
		PL2S F 1 Arg_A_WeaponOffset(- 6.0, 2.0);
		PL2S GHIJ 1;
		PL2S K 6;
		PL2S K 1 Arg_A_WeaponOffset(- 7.0, 3.0);
		PL2S K 1 Arg_A_WeaponOffset(- 8.0, 4.0);
		PL2S L 1 Arg_A_WeaponOffset(-10.0, 6.0);
		PL2S L 1 Arg_A_WeaponOffset(-12.0, 8.0);
		PL2S M 1 Arg_A_WeaponOffset(-13.0, 9.0);
		PL2S N 1 Arg_A_WeaponOffset(-13.0, 9.0);
		PL2S O 1 Arg_A_WeaponOffset(-12.0, 8.0);
		PL2S P 1 Arg_A_WeaponOffset(-10.0, 6.0);
		PL2S Q 1 Arg_A_WeaponOffset(- 8.0, 4.0);
		PL2S Q 1 Arg_A_WeaponOffset(- 6.0, 3.0);
		PL2S Q 1 Arg_A_WeaponOffset(- 4.0, 2.0);
		PL2S Q 1 Arg_A_WeaponOffset(- 2.0, 1.0);
		PL2S Q 1 Arg_A_WeaponOffset(- 1.0, 0.0);
		PL2S Q 6 Arg_A_WeaponOffset(  0.0, 0.0);
		PL2S RSTU 2;
	Mod2Ready:
		PL2G A 1 A_WeaponReady(WRF_ALLOWRELOAD);
		PL2G D 1 {
			if(invoker.mod2.cooldown.val == 1) {
				A_PlaySound("weapons/plasma/mod2ready", CHAN_AUTO);
			}
			if(invoker.mod2.cooldown.val >= 1) {
				return ResolveState("Mod2Ready");
			}
			return ResolveState(null);
		}
		PL2G DEEFFFFFFFFEEDDA 1 A_WeaponReady(WRF_ALLOWRELOAD);
		Loop;
	Mod2Up:
		PL2G A 1 Arg_A_JumpIfAmmo('Mod2Hold', invoker.mod2.ammoUse);
		Goto Mod2Ready;
	Mod2Hold:
		PL2G B 1 Bright {
			A_GunFlash();
			A_AlertMonsters();
			A_PlaySound("weapons/plasma/mod2fire", CHAN_6);
			A_FireProjectile("ArgStunBomb", 0, 0, 0, 0, FPF_AIMATANGLE, -5);
			Arg_A_TakeAmmo(invoker.mod2.ammoUse);
		}
		PL2G A 1 Arg_A_WeaponOffset( 5.0,  5.0);
		PL2G G 1 Arg_A_WeaponOffset(12.0, 12.0);
		PL2G G 1 Arg_A_WeaponOffset(15.0, 15.0);
		PL2G H 1 Arg_A_WeaponOffset(16.0, 16.0);
		PL2G H 1 Arg_A_WeaponOffset(14.0, 14.0);
		PL2G I 1 Arg_A_WeaponOffset(11.0, 11.0);
		PL2G I 1 Arg_A_WeaponOffset( 8.0,  8.0);
		PL2G I 1 Arg_A_WeaponOffset( 4.0,  4.0);
		PL2G I 1 Arg_A_WeaponOffset( 1.0,  1.0);
		PL2G J 2 Arg_A_WeaponOffset( 0.0,  0.0);
		PL2G KLIHG 2;
		Goto Cooldown;
	}
}

class ArgPlasma : PlasmaBall
{
	Default
	{
		Radius 8;
		Height 8;
		Damage 5;
		Scale 0.75;
		Speed 50;
		SeeSound "";
		DeathSound "weapons/plasma/explode";
		Decal "PlasmaScorchLower";
		DamageType "ArgPlasma";
		Obituary "$ARG_OB_PLASMA";
	}
	States
	{
	Spawn:
		PLSS AB 3 Bright;
		Loop;
	Death:
		PLSE ABCDE 2 Bright;
		Stop;
	}
}

class ArgPlasmaHeatWave : Actor
{
	Default
	{
		Projectile;
		Speed 10;
		Damage 0;
		Alpha 0.5;
		RenderStyle 'Add';
		XScale 0.5;
		YScale 0.1;

		+BOUNCEONWALLS
		+BOUNCEONCEILINGS
		+THRUACTORS
	}
	States
	{
	Spawn:
		PBOM EEFFFGGGGHHHHHIIIIII 1 Bright {
			A_SetSpeed(speed * 0.66);
			A_SetScale(0.5, scale.y * 1.1);
			A_FadeOut(0.025);
		}
		Stop;
	Death:
		TNT1 A 0;
		Stop;
	}
}

class ArgStunBomb : ArgPlasma
{
	Default
	{
		Speed 40;
		Damage 0;
		DeathSound "weapons/plasma/mod2hit";
		DamageType "ArgStun";
		Decal "None";
	
		-NOGRAVITY
	}
	States
	{
	Spawn:
		PBOM ABCD 1 Bright;
		Loop;
	Death:
		PBOM E 0 Bright X_StunBombHit(160);
		PBOM EE 1 Bright X_StunBombFX("4444FF", 40);
		PBOM EF 1 Bright X_StunBombFX("8888FF", 48);
		PBOM FF 1 Bright X_StunBombFX("AAAAFF", 56);
		PBOM GG 1 Bright X_StunBombFX("8888FF", 48);
		PBOM GH 1 Bright X_StunBombFX("4444FF", 40);
		PBOM HH 1 Bright X_StunBombFX("0000FF", 32);
		PBOM I 3 Bright;
		Stop;
	}
	
	/*
	 * Stun Bomb effect. Kicks off the magic stun effect by dropping some
	 * dangerous zappy actors into the fray.
	 */
	void X_StunBombHit(float stunrad) {
		A_NoGravity();

		// iterate over all monsters within our radius and spawn in
		// a nefarious ArgNeuralStunner to keep them at bay.
		BlockThingsIterator it = BlockThingsIterator.create(self, stunrad);
		while(it.Next()) {
			// only stun living monsters within line of sight.
			if(it.thing
			&& it.thing.bIsMonster
			&& it.thing.health > 0
			&& it.thing.CheckSight(self)
			) {
				let stunner = ArgNeuralStunner(Spawn("ArgNeuralStunner", self.pos));
				stunner.stunTarget = it.thing;
				// that's it; the ArgNeuralStunner actor will do the rest of the
				// grunt work and remove itself when the stunning time is up.
			}
		}
	} 
	
	/*
	 * spiffy zappy FX function
	 */
	void X_StunBombFX(color col, int range) {
		for (int i = 0; i < 10; i++) {
			A_CustomRailgun(0, 0, "", col, RGF_SILENT | RGF_FULLBRIGHT | RGF_CENTERZ, 0, 16, "ArgStunBombPuff", 360, 80, range, 1, 0.2, 0.0);
		}
	}
}

class ArgStunBombPuff : ArgPuff
{
	Default
	{
		+BLOODLESSIMPACT
	}
	States
	{
	Spawn:
		TNT1 A 1;
		Stop;
	}
}

/*
 * Super-special-stun-effect actor. One of these is spawned per stun target
 * and handles sending its victim into its Pain.Stun state repeatedly.
 * Rather goofy but useful monster-independent implementation. Whoop!
 */
class ArgNeuralStunner : Actor
{
	Actor stunTarget;
	int stunCounter;
	int stunSeconds;

	Default
	{
		RenderStyle 'None';
		+NOINTERACTION
	}
	States
	{
	Spawn:
		TNT1 A 35 NoDelay X_StunEffect;
		TNT1 A 0 X_StunCountdown();
		Stop;
	}

	/*
	 * Initialize the stun timer post-spawn.
	 */
	override void PostBeginPlay()
	{
		if(self.stunTarget) {
			self.stunSeconds = self.stunTarget.Stamina;
		}
		if(self.stunSeconds == 0) {
			self.stunSeconds = ARG_DEFAULT_STUN_SECONDS;
		}
	}

	/*
	 * Keep the target stunned every tic by thrusting it
	 * in its spawn state. Assuming the actor's alive, of course.
	 */
	override void Tick() {
		super.Tick();
		
		if(self.stunTarget && self.stunTarget.health > 0) {
			// repeatedly force the actor into its pain state because SADISM
			State painState = self.stunTarget.FindState('Pain.Stun');
			if(painState) {
				self.stunTarget.SetState(painState);
			}
		}
	}

	/*
	 * Spawn some zappy stun FX at the target's location.
	 */
	void X_StunEffect() {
		// don't zap dead people; it's rude
		if(self.stunTarget && self.stunTarget.health > 0) {
			Vector3 fxPos = self.stunTarget.pos + (0, 0, self.stunTarget.height / 2);
			if(self.stunTarget.radius <= 28.0) {
				Spawn("ArgStunEffect", fxPos);
			} else if (self.stunTarget.radius <= 56.0) {
				Spawn("ArgStunEffectLarge", fxPos);
			} else {
				Spawn("ArgStunEffectHuge", fxPos);
			}
		}
	}

	/*
	 * Check to see if we should continue stunning. this is really
	 * more of a "StunCountUp" function, but whatevs. :P
	 */
	state X_StunCountdown() {
		// increment first since the 1-second delay occurs BEFORE this function call.
		self.stunCounter++;
		if(self.stunTarget && self.stunTarget.health > 0 && self.stunSeconds > self.stunCounter) {
			return ResolveState('Spawn');
		} else {
			// remove the actor; this goes straight to a Stop directive.
			return ResolveState(null);
		}
	}
}

class ArgStunEffect : ArgTrailNoPhysics
{
	Default
	{
		Scale 0.5;
	}
	States
	{
	Spawn:
		STUN A 0 Bright NoDelay A_SetScale(scale.x*(random(0,1)*2-1), scale.y*(random(0,1)*2-1)); // randomly flip x and y
		STUN ABCDEF 2 Bright;
		STUN GGHHII 1 Bright A_FadeOut(0.2);
		Stop;
	}
}

class ArgStunEffectLarge : ArgStunEffect { Default { Scale 1.0; } }
class ArgStunEffectHuge  : ArgStunEffect { Default { Scale 1.5; } }
