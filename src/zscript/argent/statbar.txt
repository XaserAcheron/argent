// --------------------------------------------------------------------------
//
// ARGENT: Status Bar
//
// --------------------------------------------------------------------------

class ArgStatusBar : DoomStatusBar
{
	HUDFont ArgLargeFont;
	HUDFont ArgSmallFont;

	const ARG_HUD_WIDTH   = 480;
	const ARG_HUD_HEIGHT  = 360;

	/*
	 * Init Fonts n' stuff.
	 */
	override void Init() {
		Super.Init();

		self.ArgLargeFont = self.Arg_CreateFont("hudfont-large");
		self.ArgSmallFont = self.Arg_CreateFont("hudfont-small");
	}

	/*
	 * Create Font shortcut, for niceness' sake.
	 */
	HUDFont Arg_CreateFont(Font font, int widthChar = "0", bool monospace = true) {
		return HUDFont.Create(font, font.GetCharWidth(widthChar), monospace);
	}

	/*
	 * Draw entry point. This inherits from Doom's status bar so we can show the
	 * classic HUD if the use opts for it.
	 */ 
	override void Draw(int state, double TicFrac) {
		CVar cv = CVar.FindCvar("arg_classicHUD");
		int useClassicHUD = (cv) ? cv.GetInt() : false;

		// Classic: just pass through to Doom's base status bar drawer. 'Nuff said.
		if(useClassicHUD) {
			Super.Draw(state, TicFrac);

		// ARGENT "Modern" Statsubar -- [TODO] make; for now, just show the classic one.
		} else if (state == HUD_StatusBar) {
			Super.Draw(state, TicFrac);

		// ARGENT "Modern" HUD.
		} else if (state == HUD_Fullscreen) {
			Super.Draw(HUD_None, TicFrac); // handles crosshair n' whatnot.
			self.BeginHUD(1.0, false, ARG_HUD_WIDTH, ARG_HUD_HEIGHT);
			self.DrawArgentHUD();
		}
	}

	/*
	 * ARGENT "Modern" HUD.
	 */
	protected void DrawArgentHUD() {

		DrawImage("graphics/hud/base-left.png" ,(  24, -62), DI_ITEM_OFFSETS);
		DrawImage("graphics/hud/base-right.png",(-167, -62), DI_ITEM_OFFSETS);

		// health
		int health = self.CPlayer.health;
		DrawString(self.ArgLargeFont, FormatNumber(health, 3), (64, -43), DI_TEXT_ALIGN_RIGHT);
		DrawBar("graphics/hud/bar-health-1.png", "graphics/hud/bar-health-1x.png", health, 100, (79, -41), 0, SHADER_HORZ, DI_ITEM_OFFSETS);
		DrawBar("graphics/hud/bar-health-2.png", "graphics/hud/bar-health-2x.png", health, 200, ( 0, -41), 0, SHADER_HORZ, DI_ITEM_OFFSETS);

		// armor
		int armor = GetArmorAmount();
		bool hasBlueArmor = (self.GetArmorSavePercent() >= 50);
		DrawImage(hasBlueArmor ? "graphics/hud/armor-blue.png" : "graphics/hud/armor-green.png",(68, -57), DI_ITEM_OFFSETS);
		DrawString(self.ArgSmallFont, FormatNumber(armor, 3), (64, -55), DI_TEXT_ALIGN_RIGHT);
		DrawBar("graphics/hud/bar-armor-1.png", "graphics/hud/bar-armor-1x.png", armor, 100, (79, -55), 0, SHADER_HORZ, DI_ITEM_OFFSETS);
		DrawBar("graphics/hud/bar-armor-2.png", "graphics/hud/bar-armor-2x.png", armor, 200, ( 0, -55), 0, SHADER_HORZ, DI_ITEM_OFFSETS);


		// [TODO] the rest of this
	}
}
