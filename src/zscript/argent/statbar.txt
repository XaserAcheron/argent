// --------------------------------------------------------------------------
//
// ARGENT: Status Bar
//
// --------------------------------------------------------------------------

class ArgStatusBar : DoomStatusBar
{
	HUDFont ArgLargeFont;
	HUDFont ArgSmallFont;

	const ARG_HUD_WIDTH    = 480;
	const ARG_HUD_HEIGHT   = 360;
	const ARG_MODUI_WIDTH  = 480; //640;
	const ARG_MODUI_HEIGHT = 360; //480;

	/*
	 * Init Fonts n' stuff.
	 */
	override void Init() {
		Super.Init();

		self.ArgLargeFont = self.Arg_CreateFont("hudfont-large");
		self.ArgSmallFont = self.Arg_CreateFont("hudfont-small");
	}

	/*
	 * Create Font shortcut, for niceness' sake.
	 */
	HUDFont Arg_CreateFont(Font font, int widthChar = "0", bool monospace = true) {
		return HUDFont.Create(font, font.GetCharWidth(widthChar), monospace);
	}

	/*
	 * Draw entry point. This inherits from Doom's status bar so we can show the
	 * classic HUD if the use opts for it.
	 */ 
	override void Draw(int state, double TicFrac) {
		CVar cv = CVar.FindCvar("arg_classicHUD");
		int useClassicHUD = (cv) ? cv.GetInt() : false;

		// Classic: just pass through to Doom's base status bar drawer. 'Nuff said.
		if(useClassicHUD) {
			Super.Draw(state, TicFrac);

		// ARGENT "Modern" Statsubar -- [TODO] make; for now, just show the classic one.
		} else if (state == HUD_StatusBar) {
			Super.Draw(state, TicFrac);

		// ARGENT "Modern" HUD.
		} else if (state == HUD_Fullscreen) {
			Super.Draw(HUD_None, TicFrac); // handles crosshair n' whatnot.
			self.BeginHUD(1.0, false, ARG_HUD_WIDTH, ARG_HUD_HEIGHT);
			self.DrawArgentHUD();
		}
		
		// Draw the mod kit UI if we're currently using the item.
		// [TODO] replace inventory check with a uservar check
		let modkit = ArgModKit(CPlayer.mo.FindInventory("ArgModKit"));
		if(modkit && modkit.active) {
			self.BeginHUD(1.0, false, ARG_MODUI_WIDTH, ARG_MODUI_HEIGHT);
			self.DrawArgentModUI();
		}
	}

	/*
	 * ARGENT "Modern" HUD.
	 */
	protected void DrawArgentHUD() {

		DrawImage("graphics/hud/base-left.png" ,(  24, -62), DI_ITEM_OFFSETS);
		DrawImage("graphics/hud/base-right.png",(-167, -62), DI_ITEM_OFFSETS);

		// health
		int health = self.CPlayer.health;
		DrawString(self.ArgLargeFont, FormatNumber(health, 3), (64, -43), DI_TEXT_ALIGN_RIGHT);
		DrawBar("graphics/hud/bar-health-1.png", "graphics/hud/bar-health-1x.png", health, 100, (79, -41), 0, SHADER_HORZ, DI_ITEM_OFFSETS);
		DrawBar("graphics/hud/bar-health-2.png", "graphics/hud/bar-health-2x.png", health, 200, ( 0, -41), 0, SHADER_HORZ, DI_ITEM_OFFSETS);

		// armor
		int armor = GetArmorAmount();
		bool hasBlueArmor = (self.GetArmorSavePercent() >= 50);
		DrawImage(hasBlueArmor ? "graphics/hud/armor-blue.png" : "graphics/hud/armor-green.png",(68, -57), DI_ITEM_OFFSETS);
		DrawString(self.ArgSmallFont, FormatNumber(armor, 3), (64, -55), DI_TEXT_ALIGN_RIGHT);
		DrawBar("graphics/hud/bar-armor-1.png", "graphics/hud/bar-armor-1x.png", armor, 100, (79, -55), 0, SHADER_HORZ, DI_ITEM_OFFSETS);
		DrawBar("graphics/hud/bar-armor-2.png", "graphics/hud/bar-armor-2x.png", armor, 200, ( 0, -55), 0, SHADER_HORZ, DI_ITEM_OFFSETS);
		
		// ammo
		let ammo = Ammo(GetCurrentAmmo());
		if(ammo) {
			DrawString(self.ArgLargeFont, FormatNumber(ammo.Amount, 3), (-96, -58), DI_TEXT_ALIGN_RIGHT);
//			DrawInventoryIcon(ammo, (-162, -57), DI_ITEM_OFFSETS); // [TODO] this properly, instead of HUD hacks.
			let backpack = CPlayer.mo.FindInventory("BackpackItem", true);
			if(backpack) {
				DrawBar("graphics/hud/bar-ammo-1a.png", "graphics/hud/bar-ammo-1xa.png", ammo.Amount, ammo.MaxAmount        , (-228, -41), 0, SHADER_HORZ | SHADER_REVERSE, DI_ITEM_OFFSETS);
				DrawBar("graphics/hud/bar-ammo-2.png" , "graphics/hud/bar-ammo-2x.png" , ammo.Amount, ammo.BackpackMaxAmount, (-162, -41), 0, SHADER_HORZ | SHADER_REVERSE, DI_ITEM_OFFSETS);
			} else {
				DrawBar("graphics/hud/bar-ammo-1.png", "graphics/hud/bar-ammo-1x.png", ammo.Amount, ammo.MaxAmount, (-162, -41), 0, SHADER_HORZ | SHADER_REVERSE, DI_ITEM_OFFSETS);
			}
		}
		
		// ammo icons -- [TODO] replace this legacy jank-hack with a real thing.
		if(Clip         (GetCurrentAmmo())) { DrawImage("graphics/hud/icon-bullets.png", (-162, -57), DI_ITEM_OFFSETS); }
		if(Shell        (GetCurrentAmmo())) { DrawImage("graphics/hud/icon-shells.png" , (-162, -57), DI_ITEM_OFFSETS); }
		if(ArgRocketAmmo(GetCurrentAmmo())) { DrawImage("graphics/hud/icon-rockets.png", (-162, -57), DI_ITEM_OFFSETS); }
		if(Cell         (GetCurrentAmmo())) { DrawImage("graphics/hud/icon-cells.png"  , (-162, -57), DI_ITEM_OFFSETS); }
		if(ArgBFGAmmo   (GetCurrentAmmo())) { DrawImage("graphics/hud/icon-bfgammo.png", (-162, -57), DI_ITEM_OFFSETS); }
		
		// [TODO] mod icons at some point -- these will sit next to the ammo icons.
		
		// weapon icon
		let weapon = ArgWeapon(CPlayer.ReadyWeapon);
		if(weapon) {
			DrawInventoryIcon(weapon, (-95, -59), DI_ITEM_OFFSETS);
		}
		
		// equipment
		// [TODO] the rest of this; since right now we just have the mod kit,
		//        we don't have to worry about the full inventory bar just yet.
		if(CPlayer.mo.FindInventory("ArgModKit")) { // this check will vanish when the equipment system exists.
			DrawImage("graphics/hud/equip-box-selected.png" ,(-204, -46), DI_ITEM_OFFSETS);
			DrawInventoryIcon(CPlayer.mo.InvSel, (-204, -46), DI_ITEM_OFFSETS);
			DrawString(self.ArgSmallFont, FormatNumber(CPlayer.mo.InvSel.Amount, 3), (-169, -31), DI_TEXT_ALIGN_RIGHT);
		}

		// keys -- uggo copypasta since I guess that's how we do this now
		Vector2 keypos = (28, -71);
		for(let i = CPlayer.mo.Inv; i != null; i = i.Inv) {
			if (i is "Key" && i.Icon.IsValid()) {
				DrawTexture(i.Icon, keypos, DI_ITEM_OFFSETS);
				Vector2 size = TexMan.GetScaledSize(i.Icon);
				keypos.X += size.X + 2;
			}
		}
	}

	/*
	 * ARGENT Mod-Kit Interface
	 */
	protected void DrawArgentModUI() {
		let modWeapon = ArgModWeapon(CPlayer.ReadyWeapon);
		
		if(modWeapon) {
			// draw mod panels, allowing for selection and stuff.
			// [TODO] make the mods classes so this can be referenced better
			self.DrawArgentModPanel(  0, modWeapon.mod[1].tag, modWeapon.mod[1].description, modWeapon.mod[1].pic, "+attack"   , !modWeapon.mod[1].enabled);
			self.DrawArgentModPanel(320, modWeapon.mod[2].tag, modWeapon.mod[2].description, modWeapon.mod[2].pic, "+altattack", !modWeapon.mod[2].enabled);

		} else {
			// weapon isn't moddable; display this onscreen.
			self.DrawArgentModPanel(160, "No Mods Available", "No mods available for this weapon.", "graphics/hud/mod-pic-nope.png", "", false);
		}
		
		// Draw footer with instructions n' such.
		// [TOODO] replace '+USE' with actual thing
		self.DrawArgentModFooter("Switch weapons to browse mods.", "Press '" .. "+use" .. "' to exit.", 0);

		// [TODO] remove this test shet
		DrawImage("graphics/hud/base-right.png" ,(  24, -62), DI_ITEM_OFFSETS);
	}
	protected void DrawArgentModPanel(int x, string tag, string desc, string icon, string key, bool got) {
		// [TODO] this
	}
	protected void DrawArgentModFooter(string text1, string text2, int time) {
		// [TODO] this
	}
}
