// --------------------------------------------------------------------------
//
// ARGENT: Base Equipment Definitions
//
// --------------------------------------------------------------------------

class ArgEquipment : CustomInventory
{
	Default
	{
		Scale 0.66;
		Inventory.PickupMessage "$ARG_GOT_MOD_KIT";
		Inventory.PickupSound "items/modkit/pickup";
		Inventory.MaxAmount 1;
		Inventory.Icon "";

		+INVENTORY.UNTOSSABLE
		+INVENTORY.KEEPDEPLETED
		+INVENTORY.FANCYPICKUPSOUND
		+INVENTORY.INVBAR
	}

	States
	{
	Use:
		TNT1 A 0 Arg_A_UseEquipment();
		Stop;
	}
	
	States(Weapon)
	{
	UseEquipment:
		EQPG A 1 A_WeaponOffset(-120,-25);
		EQPG A 1 A_WeaponOffset(- 90,-20, WOF_INTERPOLATE);
		EQPG A 1 A_WeaponOffset(- 60,-15, WOF_INTERPOLATE);
		EQPG A 1 A_WeaponOffset(- 40,-10, WOF_INTERPOLATE);
		EQPG A 1 A_WeaponOffset(- 20,  0, WOF_INTERPOLATE);
		EQPG A 1 A_WeaponOffset(-  5, 10, WOF_INTERPOLATE);
		EQPG A 0 Arg_A_EquipmentState("UseEquipmentGeneric");
	UseEquipmentGeneric:
	UseEquipmentEnd:
		EQPG B 1 A_WeaponOffset(  10, 20, WOF_INTERPOLATE);
		EQPG B 1 A_WeaponOffset(  20, 35, WOF_INTERPOLATE);
		EQPG B 1 A_WeaponOffset(  30, 50, WOF_INTERPOLATE);
		EQPG B 1 A_WeaponOffset(  40, 70, WOF_INTERPOLATE);
		EQPG B 1 A_WeaponOffset(  50, 90, WOF_INTERPOLATE);
		TNT1 A 0 ResolveState("Ready"); // resolves to weapon's Ready state
		Stop;
	}

	/*
	 * Use equipment. This sets the player's weapon state to the item-defined
	 * "UseEquipment" state, which is pretty rad.
	 */
	action bool Arg_A_UseEquipment() {

		// Temporarily save a reference to this equipment item in the
		// player class so we can access it from Weapon states.
		let argPlayer = ArgPlayer(self);
		if(argPlayer) {
			argPlayer.activeEquipment = invoker;
		}

		// only jump if the player's active weapon is in its ready state.
		if(player && player.ReadyWeapon && (player.WeaponState & ARG_WF_WEAPONREADY)) {
			player.SetPsprite(PSP_WEAPON, ResolveState("UseEquipment"));
	
			return false; // [TODO] switch this back when done testing stuff
//			return true; // remove from inventory
		} else {
			return false; // ...or don't.
		}
	}

	/*
	 * Jump to the specified state on the player's active equipment item.
	 * This is necessary since the Weapon needs to access states stored on
	 * the equipment item and respect overrides, etc.
	 *
	 * [This was originally done via a virtual function, but that entered
	 *  undefined territory land real quick, so 'nope' to that.]
	 */
	action(Weapon) state Arg_A_EquipmentState(StateLabel stateName) {
		let argPlayer = ArgPlayer(self);
		if(argPlayer && argPlayer.activeEquipment) {
			return argPlayer.activeEquipment.ResolveState(stateName);
		}
		return ResolveState(null);
	}
}
