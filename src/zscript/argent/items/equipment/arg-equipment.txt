// --------------------------------------------------------------------------
//
// ARGENT: Base Equipment Definitions
//
// --------------------------------------------------------------------------

class ArgEquipment : CustomInventory
{
	sound pPreSound;
	sound pProjectileSound;
	class<Actor> pProjectileType;
	float pProjectilePitch;

	int rechargeAmount; // max amount of units we can recharge; initially zero.
	int rechargeDelay;  // duration in tics until we recharge 1 unit.
	int rechargeTics;   // current recharge tic.

	property PreSound       : pPreSound;
	property ProjectileSound: pProjectileSound;
	property ProjectileType : pProjectileType;
	property ProjectilePitch: pProjectilePitch;
	property RechargeDelay  : rechargeDelay;

	Default
	{
		Scale 0.66;
		Inventory.PickupMessage "$ARG_GOT_MOD_KIT";
		Inventory.PickupSound "items/modkit/pickup";
		Inventory.MaxAmount 1;
		Inventory.Icon "";
		Inventory.InterHubAmount 999;

		ArgEquipment.ProjectileType 'ArgNothing';
		ArgEquipment.ProjectileSound 'items/equipment/grenade/throw';
		ArgEquipment.ProjectilePitch -10;
		ArgEquipment.RechargeDelay -15; // negative means seconds; positive means tics.

		+INVENTORY.UNTOSSABLE
		+INVENTORY.IGNORESKILL
		+INVENTORY.KEEPDEPLETED
		+INVENTORY.FANCYPICKUPSOUND
		+INVENTORY.INVBAR
	}

	States
	{
	Use:
		TNT1 A 0 Arg_A_UseEquipment();
		Stop;
	}

	/*
	 * Use equipment. This sets the player's weapon state to the item-defined
	 * "UseEquipment" state, which is pretty rad.
	 */
	action bool Arg_A_UseEquipment() {

		// Temporarily save a reference to this equipment item in the
		// player class so we can access it from Weapon states.
		let argPlayer = ArgPlayer(self);
		if(argPlayer) {
			argPlayer.activeEquipment = invoker;
		}

		// only jump if the player's active weapon is in its ready state.
		if(player && player.ReadyWeapon && (player.WeaponState & ARG_WF_WEAPONREADY)) {
			player.SetPsprite(PSP_WEAPON, player.ReadyWeapon.FindState("UseEquipmentStart"));

			return true; // remove from inventory
		} else {
			return false; // ...or don't.
		}
	}

	/*
	 * Get state label for animation. This can't be added as a property for
	 * some reason, so a virtual function is the next best thing.
	 */
	virtual StateLabel X_GetUseStateLabel() {
		return 'UseEquipmentGeneric';
	}

	/*
	 * Get recharge delay in tics (i.e. convert negative numbers from seconds).
	 */
	clearscope int Arg_RechargeDelayTics() {
		return (self.rechargeDelay < 0) ? (self.rechargeDelay*-35) : self.rechargeDelay;
	}

	/*
	 * Recharge inventory. Increases the recharge counter by a tic and
	 * grants a cool bonus item when it hits the max.
	 */
	void Arg_Recharge() {
		if(self.Amount < self.rechargeAmount) {

			// give one unit of charge and see if we've hit the delay.
			// if so, gift an actual unit of equipment. Hooray charginess!
			self.rechargeTics++;
			if(self.rechargeTics >= self.Arg_RechargeDelayTics()) {
				self.Amount++;
				self.rechargeTics = 0;
			}
		}
	}
}
