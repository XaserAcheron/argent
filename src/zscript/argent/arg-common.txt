// --------------------------------------------------------------------------
//
// ARGENT: Common Class. Hosts global variables and common static functions.
//
// --------------------------------------------------------------------------

class ArgCommon : Thinker
{
	Array<ArgMerch> merch;
	
	const MERCH_PER_PAGE = 2;

	/*
	 * Init global variables.
	 */
	ArgCommon Init()
	{
		// set up the merch array; this lists all the stuff "for sale" in the
		// mod kit menu that aren't mods -- e.g. backpack, equipment, etc.
		merch.push(ArgMerch.Create('Backpack'            , '$ARG_TAG_BACKPACK', '$ARG_MERCH_DESC_BACKPACK', '$ARG_MERCH_ICON_BACKPACK', '$ARG_MERCH_PIC_BACKPACK' ));
		merch.push(ArgMerch.Create('ArgEquipmentGrenade' , '$ARG_TAG_GRENADE' , '$ARG_MERCH_DESC_GRENADE' , '$ARG_MERCH_ICON_GRENADE' , '$ARG_MERCH_PIC_GRENADE'  ));
//		merch.push(ArgMerch.Create('ArgEquipmentHologram', '$ARG_TAG_HOLOGRAM', '$ARG_MERCH_DESC_HOLOGRAM', '$ARG_MERCH_ICON_HOLOGRAM', '$ARG_MERCH_PIC_HOLOGRAM' ));
//		merch.push(ArgMerch.Create('ArgEquipmentSiphon'  , '$ARG_TAG_SIPHON'  , '$ARG_MERCH_DESC_SIPHON'  , '$ARG_MERCH_ICON_SIPHON'  , '$ARG_MERCH_PIC_SIPHON'   ));
		
		// do some housekeeping n' return
		ChangeStatNum(STAT_STATIC);
		return self;
	}
	static ArgCommon _Init()
	{
		return new("ArgCommon").Init();
	}

	/*
	 * Get ArgCommon singleton to access global variables.
	 */
	static ArgCommon Get()
	{
		ThinkerIterator it = ThinkerIterator.Create("ArgCommon", STAT_STATIC);
		let p = ArgCommon(it.Next());
		if (p == null)
		{
			p = ArgCommon._Init();
		}
		return p;
	}

	/*
	 * UI-safe version of Get(). Note that this does not guarantee that the
	 * object exists on the first tic, since it's dependent on the WorldLoaded
	 * event being called first. Uggo.
	 */
	static clearscope ArgCommon GetUI()
	{
		ThinkerIterator it = ThinkerIterator.Create("ArgCommon", STAT_STATIC);
		let p = ArgCommon(it.Next());
		return p;
	}
	
	/*
	 * Non-static function: return the number of pages of merch that exist.
	 */
	clearscope int MerchPageCount() {
		return ceil(1.0 * merch.Size() / MERCH_PER_PAGE);
	}

	/*
	 * Non-static function: return the merch item for a particular page.
	 */
	clearscope ArgMerch MerchForPage(int page, int pageItem = 1) {
		// treat pages & items as 1-indexed, since that's how they work elsewhere.
		int maxPage = MerchPageCount();
		if(page > 0
		&& page <= maxPage
		&& pageItem > 0
		&& pageItem <= MERCH_PER_PAGE) {
			int merchIndex = (page-1) * MERCH_PER_PAGE + (pageItem-1);
			if(merchIndex >= 0 && merchIndex < merch.Size()) {
				return merch[merchIndex];
			}
		}
		return null;
	}

	/*
	 * Convenience function; jumps to XDeath if the Always Gib cvar is set.
	 */
	static state GibCheck(Actor this)
	{
		return this.GetCvar("arg_alwaysgib") ? this.ResolveState("XDeath") : this.ResolveState(null);
	}

	/*
	 * Gib tossing action. Throws up to 'count' actors of 'type' from the calling
	 * actor using the specified height/speed values (varied a bit for random's sake).
	 * Includes a couple of convenience flags to chain additional actions.
	 */
	static void TossGibs(Actor this, class<Actor> type, int count, int flags, double spawndist, double spawnheight, double xspeed, double yspeed)
	{
		// Randomly subtract 1 or 2 from the count to vary the number of gibs a bit.
		count = count - random(0, 2);
		
		for(int i = 0; i < count; i++) {
			this.A_SpawnItemEx(type
			,	frandom(-spawndist, spawndist)
			,	frandom(-spawndist, spawndist)
			,	spawnheight + frandom(-2, 2)
			,	xspeed * frandom(-1.0, 1.0)
			,	xspeed * frandom(-1.0, 1.0)
			,	yspeed * frandom( 0.5, 1.5)
			,	0
			,	SXF_USEBLOODCOLOR
			,	0
			);
		}
		
		// Do optional flaggy stuff.
		if(flags & ARG_TG_FALL) {
			this.A_NoBlocking();
		}
		if(flags & ARG_TG_SOUND) {
			this.A_PlaySound("effects/splat", CHAN_AUTO);
			this.A_PlaySound("effects/gibs", CHAN_AUTO);
		}
		if(flags & ARG_TG_SCREAM) {
			this.A_Scream();
		}
	}
}
